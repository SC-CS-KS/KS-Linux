{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green128\blue128;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid653678363\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1620714379}
{\list\listtemplateid1572545470\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1762537146}
{\list\listtemplateid792434601\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid867016274}
{\list\listtemplateid245014940\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid2034375696}
{\list\listtemplateid1632604759\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1086536631}
}
{\*\listoverridetable
{\listoverride\listid1620714379\listoverridecount0\ls1}
{\listoverride\listid1762537146\listoverridecount0\ls2}
{\listoverride\listid867016274\listoverridecount0\ls3}
{\listoverride\listid2034375696\listoverridecount0\ls4}
{\listoverride\listid1086536631\listoverridecount0\ls5}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 wget
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs18 wget\uc2\u26159 \'ca\'c7\u22312 \'d4\'daLinux\u19979 \'cf\'c2\u24320 \'bf\'aa\u21457 \'b7\'a2\u30340 \'b5\'c4\u24320 \'bf\'aa\u25918 \'b7\'c5\u28304 \'d4\'b4\u20195 \'b4\'fa\u30721 \'c2\'eb\u30340 \'b5\'c4\u36719 \'c8\'ed\u20214 \'bc\'fe\u65292 \'a3\'ac\u20316 \'d7\'f7\u32773 \'d5\'df\u26159 \'ca\'c7Hrvoje Niksic\u65292 \'a3\'ac\u21518 \'ba\'f3\u26469 \'c0\'b4\u34987 \'b1\'bb\u31227 \'d2\'c6\u26893 \'d6\'b2\u21040 \'b5\'bd\u21253 \'b0\'fc\u25324 \'c0\'a8Windows\u22312 \'d4\'da\u20869 \'c4\'da\u30340 \'b5\'c4\u21508 \'b8\'f7\u20010 \'b8\'f6\u24179 \'c6\'bd\u21488 \'cc\'a8\u19978 \'c9\'cf\u12290 \'a1\'a3\uc1
\par \plain \f1\fs18\cf1 01.\uc2\u25903 \'d6\'a7\u25345 \'b3\'d6\u26029 \'b6\'cf\u28857 \'b5\'e3\u19979 \'cf\'c2\u20256 \'b4\'ab\u21151 \'b9\'a6\u33021 \'c4\'dc\uc1
\par \plain \f1\fs18 \uc2\u36825 \'d5\'e2\u19968 \'d2\'bb\u28857 \'b5\'e3\u65292 \'a3\'ac\u20063 \'d2\'b2\u26159 \'ca\'c7\u32593 \'cd\'f8\u32476 \'c2\'e7\u34434 \'c2\'ec\u34433 \'d2\'cf\u21644 \'ba\'cdFlashGet\u24403 \'b5\'b1\u24180 \'c4\'ea\u26368 \'d7\'ee\u22823 \'b4\'f3\u30340 \'b5\'c4\u21334 \'c2\'f4\u28857 \'b5\'e3\u65292 \'a3\'ac\u29616 \'cf\'d6\u22312 \'d4\'da\u65292 \'a3\'acWget\u20063 \'d2\'b2\u21487 \'bf\'c9\u20197 \'d2\'d4\u20351 \'ca\'b9\u29992 \'d3\'c3\u27492 \'b4\'cb\u21151 \'b9\'a6\u33021 \'c4\'dc\u65292 \'a3\'ac\u37027 \'c4\'c7\u20123 \'d0\'a9\u32593 \'cd\'f8\u32476 \'c2\'e7\u19981 \'b2\'bb\u26159 \'ca\'c7\u22826 \'cc\'ab\u22909 \'ba\'c3\u30340 \'b5\'c4\u29992 \'d3\'c3\u25143 \'bb\'a7\u21487 \'bf\'c9\u20197 \'d2\'d4\u25918 \'b7\'c5\u24515 \'d0\'c4\u20102 \'c1\'cb\u12290 \'a1\'a3\uc1
\par \plain \f1\fs18\cf1 02.\uc2\u21516 \'cd\'ac\u26102 \'ca\'b1\u25903 \'d6\'a7\u25345 \'b3\'d6FTP\u21644 \'ba\'cdHTTP\u19979 \'cf\'c2\u36733 \'d4\'d8\u26041 \'b7\'bd\u24335 \'ca\'bd\uc1
\par \plain \f1\fs18 \uc2\u23613 \'be\'a1\u31649 \'b9\'dc\u29616 \'cf\'d6\u22312 \'d4\'da\u22823 \'b4\'f3\u37096 \'b2\'bf\u20998 \'b7\'d6\u36719 \'c8\'ed\u20214 \'bc\'fe\u21487 \'bf\'c9\u20197 \'d2\'d4\u20351 \'ca\'b9\u29992 \'d3\'c3HTTP\u26041 \'b7\'bd\u24335 \'ca\'bd\u19979 \'cf\'c2\u36733 \'d4\'d8\u65292 \'a3\'ac\u20294 \'b5\'ab\u26159 \'ca\'c7\u65292 \'a3\'ac\u26377 \'d3\'d0\u20123 \'d0\'a9\u26102 \'ca\'b1\u20505 \'ba\'f2\u65292 \'a3\'ac\u20173 \'c8\'d4\u28982 \'c8\'bb\u38656 \'d0\'e8\u35201 \'d2\'aa\u20351 \'ca\'b9\u29992 \'d3\'c3FTP\u26041 \'b7\'bd\u24335 \'ca\'bd\u19979 \'cf\'c2\u36733 \'d4\'d8\u36719 \'c8\'ed\u20214 \'bc\'fe\u12290 \'a1\'a3\uc1
\par \plain \f1\fs18\cf1 03.\uc2\u25903 \'d6\'a7\u25345 \'b3\'d6\u20195 \'b4\'fa\u29702 \'c0\'ed\u26381 \'b7\'fe\u21153 \'ce\'f1\u22120 \'c6\'f7\uc1
\par \plain \f1\fs18 \uc2\u23545 \'b6\'d4\u23433 \'b0\'b2\u20840 \'c8\'ab\u24378 \'c7\'bf\u24230 \'b6\'c8\u24456 \'ba\'dc\u39640 \'b8\'df\u30340 \'b5\'c4\u31995 \'cf\'b5\u32479 \'cd\'b3\u32780 \'b6\'f8\u35328 \'d1\'d4\u65292 \'a3\'ac\u19968 \'d2\'bb\u33324 \'b0\'e3\u19981 \'b2\'bb\u20250 \'bb\'e1\u23558 \'bd\'ab\u33258 \'d7\'d4\u24049 \'bc\'ba\u30340 \'b5\'c4\u31995 \'cf\'b5\u32479 \'cd\'b3\u30452 \'d6\'b1\u25509 \'bd\'d3\u26292 \'b1\'a9\u38706 \'c2\'b6\u22312 \'d4\'da\u20114 \'bb\'a5\u32852 \'c1\'aa\u32593 \'cd\'f8\u19978 \'c9\'cf\u65292 \'a3\'ac\u25152 \'cb\'f9\u20197 \'d2\'d4\u65292 \'a3\'ac\u25903 \'d6\'a7\u25345 \'b3\'d6\u20195 \'b4\'fa\u29702 \'c0\'ed\u26159 \'ca\'c7\u19979 \'cf\'c2\u36733 \'d4\'d8\u36719 \'c8\'ed\u20214 \'bc\'fe\u24517 \'b1\'d8\u39035 \'d0\'eb\u26377 \'d3\'d0\u30340 \'b5\'c4\u21151 \'b9\'a6\u33021 \'c4\'dc\u12290 \'a1\'a3\uc1
\par \plain \f1\fs18\cf1 04.\uc2\u35774 \'c9\'e8\u32622 \'d6\'c3\u26041 \'b7\'bd\u20415 \'b1\'e3\u31616 \'bc\'f2\u21333 \'b5\'a5\uc1
\par \plain \f1\fs18 \uc2\u21487 \'bf\'c9\u33021 \'c4\'dc\u65292 \'a3\'ac\u20064 \'cf\'b0\u24815 \'b9\'df\u22270 \'cd\'bc\u24418 \'d0\'ce\u30028 \'bd\'e7\u38754 \'c3\'e6\u30340 \'b5\'c4\u29992 \'d3\'c3\u25143 \'bb\'a7\u24050 \'d2\'d1\u32463 \'be\'ad\u19981 \'b2\'bb\u26159 \'ca\'c7\u22826 \'cc\'ab\u20064 \'cf\'b0\u24815 \'b9\'df\u21629 \'c3\'fc\u20196 \'c1\'ee\u34892 \'d0\'d0\u20102 \'c1\'cb\u65292 \'a3\'ac\u20294 \'b5\'ab\u26159 \'ca\'c7\u65292 \'a3\'ac\u21629 \'c3\'fc\u20196 \'c1\'ee\u34892 \'d0\'d0\u22312 \'d4\'da\u35774 \'c9\'e8\u32622 \'d6\'c3\u19978 \'c9\'cf\u20854 \'c6\'e4\u23454 \'ca\'b5\u26377 \'d3\'d0\u26356 \'b8\'fc\u22810 \'b6\'e0\u30340 \'b5\'c4\u20248 \'d3\'c5\u28857 \'b5\'e3\u65292 \'a3\'ac\u26368 \'d7\'ee\u23569 \'c9\'d9\u65292 \'a3\'ac\u40736 \'ca\'f3\u26631 \'b1\'ea\u21487 \'bf\'c9\u20197 \'d2\'d4\u23569 \'c9\'d9\u28857 \'b5\'e3\u24456 \'ba\'dc\u22810 \'b6\'e0\u27425 \'b4\'ce\u65292 \'a3\'ac\u20063 \'d2\'b2\u19981 \'b2\'bb\u35201 \'d2\'aa\u25285 \'b5\'a3\u24515 \'d0\'c4\u26159 \'ca\'c7\u21542 \'b7\'f1\u38169 \'b4\'ed\u28857 \'b5\'e3\u40736 \'ca\'f3\u26631 \'b1\'ea\u12290 \'a1\'a3\uc1
\par \plain \f1\fs18\cf1 05.\uc2\u31243 \'b3\'cc\u24207 \'d0\'f2\u23567 \'d0\'a1\u65292 \'a3\'ac\u23436 \'cd\'ea\u20840 \'c8\'ab\u20813 \'c3\'e2\u36153 \'b7\'d1\uc1
\par \plain \f1\fs18 \uc2\u31243 \'b3\'cc\u24207 \'d0\'f2\u23567 \'d0\'a1\u21487 \'bf\'c9\u20197 \'d2\'d4\u32771 \'bf\'bc\u34385 \'c2\'c7\u19981 \'b2\'bb\u35745 \'bc\'c6\u65292 \'a3\'ac\u22240 \'d2\'f2\u20026 \'ce\'aa\u29616 \'cf\'d6\u22312 \'d4\'da\u30340 \'b5\'c4\u30828 \'d3\'b2\u30424 \'c5\'cc\u23454 \'ca\'b5\u22312 \'d4\'da\u22826 \'cc\'ab\u22823 \'b4\'f3\u20102 \'c1\'cb\u12290 \'a1\'a3\u23436 \'cd\'ea\u20840 \'c8\'ab\u20813 \'c3\'e2\u36153 \'b7\'d1\u23601 \'be\'cd\u19981 \'b2\'bb\u24471 \'b5\'c3\u19981 \'b2\'bb\u32771 \'bf\'bc\u34385 \'c2\'c7\u20102 \'c1\'cb\u65292 \'a3\'ac\u21363 \'bc\'b4\u20351 \'ca\'b9\u32593 \'cd\'f8\u32476 \'c2\'e7\u19978 \'c9\'cf\u26377 \'d3\'d0\u24456 \'ba\'dc\u22810 \'b6\'e0\u25152 \'cb\'f9\u35859 \'ce\'bd\u30340 \'b5\'c4\u20813 \'c3\'e2\u36153 \'b7\'d1\u36719 \'c8\'ed\u20214 \'bc\'fe\u65292 \'a3\'ac\u20294 \'b5\'ab\u26159 \'ca\'c7\u65292 \'a3\'ac\u36825 \'d5\'e2\u20123 \'d0\'a9\u36719 \'c8\'ed\u20214 \'bc\'fe\u30340 \'b5\'c4\u24191 \'b9\'e3\u21578 \'b8\'e6\u21364 \'c8\'b4\u19981 \'b2\'bb\u26159 \'ca\'c7\u25105 \'ce\'d2\u20204 \'c3\'c7\u21916 \'cf\'b2\u27426 \'bb\'b6\u30340 \'b5\'c4\u12290 \'a1\'a3\uc1
\par \plain \f1\fs18\cf2 ---------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs18 wget \uc2\u34429 \'cb\'e4\u28982 \'c8\'bb\u21151 \'b9\'a6\u33021 \'c4\'dc\u24378 \'c7\'bf\u22823 \'b4\'f3\u65292 \'a3\'ac\u20294 \'b5\'ab\u26159 \'ca\'c7\u20351 \'ca\'b9\u29992 \'d3\'c3\u36215 \'c6\'f0\u26469 \'c0\'b4\u36824 \'bb\'b9\u26159 \'ca\'c7\u27604 \'b1\'c8\u36739 \'bd\'cf\u31616 \'bc\'f2\u21333 \'b5\'a5\u30340 \'b5\'c4\u65292 \'a3\'ac\u22522 \'bb\'f9\u26412 \'b1\'be\u30340 \'b5\'c4\u35821 \'d3\'ef\u27861 \'b7\'a8\u26159 \'ca\'c7\u65306 \'a3\'ba\uc1
\par wget [\uc2\u21442 \'b2\'ce\u25968 \'ca\'fd\u21015 \'c1\'d0\u34920 \'b1\'ed] URL\u12290 \'a1\'a3\uc1
\par \plain \f1\fs18\cf2 ---------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs18 WGET(1)                            GNU Wget                            WGET(1)
\par 
\par NAME
\par \plain \f1\fs18\cf1        Wget - The non-interactive network downloader.
\par \plain \f1\fs18 
\par SYNOPSIS
\par        wget [option]... [URL]...
\par 
\par DESCRIPTION
\par        GNU Wget is a free utility for non-interactive download of files from the Web.  It supports HTTP, HTTPS, and FTP
\par        protocols, as well as retrieval through HTTP proxies.
\par 
\par        Wget is non-interactive, meaning that it can work in the background, while the user is not logged on.  This
\par        allows you to start a retrieval and disconnect from the system, letting Wget finish the work.  By contrast, most
\par        of the Web browsers require constant user\rquote s presence, which can be a great hindrance when transferring a lot of
\par        data.
\par 
\par        Wget can follow links in HTML, XHTML, and CSS pages, to create local versions of remote web sites, fully
\par        recreating the directory structure of the original site.  This is sometimes referred to as "recursive
\par        downloading."  While doing that, Wget respects the Robot Exclusion Standard (/robots.txt).  Wget can be
\par        instructed to convert the links in downloaded files to point at the local files, for offline viewing.
\par 
\par        Wget has been designed for robustness over slow or unstable network connections; if a download fails due to a
\par        network problem, it will keep retrying until the whole file has been retrieved.  If the server supports
\par        regetting, it will instruct the server to continue the download from where it left off.
\par 
\par OPTIONS
\par    Option Syntax
\par        Since Wget uses GNU getopt to process command-line arguments, every option has a long form along with the short
\par        one.  Long options are more convenient to remember, but take time to type.  You may freely mix different option
\par        styles, or specify options after the command-line arguments.  Thus you may write:
\par 
\par \plain \f1\fs18\cf1                wget -r --tries=10 http://fly.srk.fer.hr/ -o log
\par \plain \f1\fs18 
\par        The space between the option accepting an argument and the argument may be omitted.  Instead of -o log you can
\par        write -olog.
\par 
\par        You may put several options that do not require arguments together, like:
\par 
\par \plain \f1\fs18\cf1                wget -drc <URL>
\par \plain \f1\fs18 
\par        This is completely equivalent to:
\par 
\par          \plain \f1\fs18\cf1       wget -d -r -c <URL>
\par 
\par \plain \f1\fs18        Since the options can be specified after the arguments, you may terminate them with --.  So the following will
\par        try to download URL -x, reporting failure to log:
\par 
\par \plain \f1\fs18\cf1                wget -o log -- -x
\par 
\par \plain \f1\fs18        The options that accept comma-separated lists all respect the convention that specifying an empty list clears its
\par        value.  This can be useful to clear the .wgetrc settings.  For instance, if your .wgetrc sets
\par        "exclude_directories" to /cgi-bin, the following example will first reset it, and then set it to exclude /~nobody
\par        and /~somebody.  You can also clear the lists in .wgetrc.
\par 
\par             \plain \f1\fs18\cf1    wget -X " -X /~nobody,/~somebody
\par \plain \f1\fs18 
\par        Most options that do not accept arguments are boolean options, so named because their state can be captured with
\par        a yes-or-no ("boolean") variable.  For example, --follow-ftp tells Wget to follow FTP links from HTML files and,
\par        on the other hand, --no-glob tells it not to perform file globbing on FTP URLs.  A boolean option is either
\par        affirmative or negative (beginning with --no).  All such options share several properties.
\par 
\par        Unless stated otherwise, it is assumed that the default behavior is the opposite of what the option accomplishes.
\par        For example, the documented existence of --follow-ftp assumes that the default is to not follow FTP links from
\par        HTML pages.
\par 
\par        Affirmative options can be negated by prepending the --no- to the option name; negative options can be negated by
\par        omitting the --no- prefix.  This might seem superfluous---if the default for an affirmative option is to not do
\par        something, then why provide a way to explicitly turn it off?  But the startup file may in fact change the
\par        default.  For instance, using "follow_ftp = on" in .wgetrc makes Wget follow FTP links by default, and using
\par        --no-follow-ftp is the only way to restore the factory default from the command line.
\par 
\par    Basic Startup Options
\par        -V
\par        --version
\par            Display the version of Wget.
\par 
\par        -h
\par        --help
\par            Print a help message describing all of Wget\rquote s command-line options.
\par 
\par        -b
\par        --background
\par            Go to background immediately after startup.  If no output file is specified via the -o, output is redirected
\par            to wget-log.
\par 
\par        -e command
\par        --execute command
\par            Execute command as if it were a part of .wgetrc.  A command thus invoked will be executed after the commands
\par            in .wgetrc, thus taking precedence over them.  If you need to specify more than one wgetrc command, use
\par            multiple instances of -e.
\par 
\par    Logging and Input File Options
\par        -o logfile
\par        --output-file=logfile
\par            Log all messages to logfile.  The messages are normally reported to standard error.
\par 
\par        -a logfile
\par        --append-output=logfile
\par            Append to logfile.  This is the same as -o, only it appends to logfile instead of overwriting the old log
\par            file.  If logfile does not exist, a new file is created.
\par 
\par        -d
\par        --debug
\par            Turn on debug output, meaning various information important to the developers of Wget if it does not work
\par            properly.  Your system administrator may have chosen to compile Wget without debug support, in which case -d
\par            will not work.  Please note that compiling with debug support is always safe---Wget compiled with the debug
\par            support will not print any debug info unless requested with -d.
\par 
\par        -q
\par        --quiet
\par            Turn off Wget\rquote s output.
\par 
\par        -v
\par        --verbose
\par            Turn on verbose output, with all the available data.  The default output is verbose.
\par 
\par        -nv
\par        --no-verbose
\par            Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic
\par            information still get printed.
\par 
\par        -i file
\par        --input-file=file
\par            Read URLs from a local or external file.  If - is specified as file, URLs are read from the standard input.
\par            (Use ./- to read from a file literally named -.)
\par 
\par            If this function is used, no URLs need be present on the command line.  If there are URLs both on the command
\par            line and in an input file, those on the command lines will be the first ones to be retrieved.  If
\par            --force-html is not specified, then file should consist of a series of URLs, one per line.
\par 
\par            However, if you specify --force-html, the document will be regarded as html.  In that case you may have
\par            problems with relative links, which you can solve either by adding "<base href="url">" to the documents or by
\par            specifying --base=url on the command line.
\par 
\par            If the file is an external one, the document will be automatically treated as html if the Content-Type
\par            matches text/html.  Furthermore, the file\rquote s location will be implicitly used as base href if none was
\par            specified.
\par 
\par        -F
\par        --force-html
\par            When input is read from a file, force it to be treated as an HTML file.  This enables you to retrieve
\par            relative links from existing HTML files on your local disk, by adding "<base href="url">" to HTML, or using
\par            the --base command-line option.
\par 
\par        -B URL
\par        --base=URL
\par            Resolves relative links using URL as the point of reference, when reading links from an HTML file specified
\par            via the -i/--input-file option (together with --force-html, or when the input file was fetched remotely from
\par            a server describing it as HTML). This is equivalent to the presence of a "BASE" tag in the HTML input file,
\par            with URL as the value for the "href" attribute.
\par 
\par            For instance, if you specify http://foo/bar/a.html for URL, and Wget reads ../baz/b.html from the input file,
\par            it would be resolved to http://foo/baz/b.html.
\par 
\par    Download Options
\par        --bind-address=ADDRESS
\par            When making client TCP/IP connections, bind to ADDRESS on the local machine.  ADDRESS may be specified as a
\par            hostname or IP address.  This option can be useful if your machine is bound to multiple IPs.
\par 
\par        -t number
\par        --tries=number
\par            Set number of retries to number.  Specify 0 or inf for infinite retrying.  The default is to retry 20 times,
\par            with the exception of fatal errors like "connection refused" or "not found" (404), which are not retried.
\par 
\par        -O file
\par        --output-document=file
\par            The documents will not be written to the appropriate files, but all will be concatenated together and written
\par            to file.  If - is used as file, documents will be printed to standard output, disabling link conversion.
\par            (Use ./- to print to a file literally named -.)
\par 
\par            Use of -O is not intended to mean simply "use the name file instead of the one in the URL;" rather, it is
\par            analogous to shell redirection: wget -O file http://foo is intended to work like wget -O - http://foo > file;
\par            file will be truncated immediately, and all downloaded content will be written there.
\par 
\par            For this reason, -N (for timestamp-checking) is not supported in combination with -O: since file is always
\par            newly created, it will always have a very new timestamp. A warning will be issued if this combination is
\par            used.
\par 
\par            Similarly, using -r or -p with -O may not work as you expect: Wget won\rquote t just download the first file to file
\par            and then download the rest to their normal names: all downloaded content will be placed in file. This was
\par            disabled in version 1.11, but has been reinstated (with a warning) in 1.11.2, as there are some cases where
\par            this behavior can actually have some use.
\par 
\par            Note that a combination with -k is only permitted when downloading a single document, as in that case it will
\par            just convert all relative URIs to external ones; -k makes no sense for multiple URIs when they\rquote re all being
\par            downloaded to a single file.
\par 
\par \plain \f1\fs18\cf1        -nc
\par        --no-clobber
\par \plain \f1\fs18            If a file is downloaded more than once in the same directory, Wget\rquote s behavior depends on a few options,
\par            including -nc.  In certain cases, the local file will be clobbered, or overwritten, upon repeated download.
\par            In other cases it will be preserved.
\par 
\par            When running Wget without -N, -nc, -r, or -p, downloading the same file in the same directory will result in
\par            the original copy of file being preserved and the second copy being named file.1.  If that file is downloaded
\par            yet again, the third copy will be named file.2, and so on.  (This is also the behavior with -nd, even if -r
\par            or -p are in effect.)  When -nc is specified, this behavior is suppressed, and Wget will refuse to download
\par            newer copies of file.  Therefore, ""no-clobber"" is actually a misnomer in this mode---it\rquote s not clobbering
\par            that\rquote s prevented (as the numeric suffixes were already preventing clobbering), but rather the multiple
\par            version saving that\rquote s prevented.
\par 
\par            When running Wget with -r or -p, but without -N, -nd, or -nc, re-downloading a file will result in the new
\par            copy simply overwriting the old.  Adding -nc will prevent this behavior, instead causing the original version
\par            to be preserved and any newer copies on the server to be ignored.
\par 
\par            When running Wget with -N, with or without -r or -p, the decision as to whether or not to download a newer
\par            copy of a file depends on the local and remote timestamp and size of the file.  -nc may not be specified at
\par            the same time as -N.
\par 
\par            Note that when -nc is specified, files with the suffixes .html or .htm will be loaded from the local disk and
\par            parsed as if they had been retrieved from the Web.
\par 
\par        -c
\par        --continue
\par            Continue getting a partially-downloaded file.  This is useful when you want to finish up a download started
\par            by a previous instance of Wget, or by another program.  For instance:
\par 
\par                    wget -c ftp://sunsite.doc.ic.ac.uk/ls-lR.Z
\par 
\par            If there is a file named ls-lR.Z in the current directory, Wget will assume that it is the first portion of
\par            the remote file, and will ask the server to continue the retrieval from an offset equal to the length of the
\par            local file.
\par 
\par            Note that you don\rquote t need to specify this option if you just want the current invocation of Wget to retry
\par            downloading a file should the connection be lost midway through.  This is the default behavior.  -c only
\par            affects resumption of downloads started prior to this invocation of Wget, and whose local files are still
\par            sitting around.
\par 
\par            Without -c, the previous example would just download the remote file to ls-lR.Z.1, leaving the truncated
\par            ls-lR.Z file alone.
\par 
\par            Beginning with Wget 1.7, if you use -c on a non-empty file, and it turns out that the server does not support
\par            continued downloading, Wget will refuse to start the download from scratch, which would effectively ruin
\par            existing contents.  If you really want the download to start from scratch, remove the file.
\par 
\par            Also beginning with Wget 1.7, if you use -c on a file which is of equal size as the one on the server, Wget
\par            will refuse to download the file and print an explanatory message.  The same happens when the file is smaller
\par            on the server than locally (presumably because it was changed on the server since your last download
\par            attempt)---because "continuing" is not meaningful, no download occurs.
\par 
\par            On the other side of the coin, while using -c, any file that\rquote s bigger on the server than locally will be
\par            considered an incomplete download and only "(length(remote) - length(local))" bytes will be downloaded and
\par            tacked onto the end of the local file.  This behavior can be desirable in certain cases---for instance, you
\par            can use wget -c to download just the new portion that\rquote s been appended to a data collection or log file.
\par 
\par            However, if the file is bigger on the server because it\rquote s been changed, as opposed to just appended to,
\par            you\rquote ll end up with a garbled file.  Wget has no way of verifying that the local file is really a valid prefix
\par            of the remote file.  You need to be especially careful of this when using -c in conjunction with -r, since
\par            every file will be considered as an "incomplete download" candidate.
\par 
\par            Another instance where you\rquote ll get a garbled file if you try to use -c is if you have a lame HTTP proxy that
\par            inserts a "transfer interrupted" string into the local file.  In the future a "rollback" option may be added
\par            to deal with this case.
\par 
\par            Note that -c only works with FTP servers and with HTTP servers that support the "Range" header.
\par 
\par        --progress=type
\par            Select the type of the progress indicator you wish to use.  Legal indicators are "dot" and "bar".
\par 
\par            The "bar" indicator is used by default.  It draws an ASCII progress bar graphics (a.k.a "thermometer"
\par            display) indicating the status of retrieval.  If the output is not a TTY, the "dot" bar will be used by
\par            default.
\par 
\par            Use --progress=dot to switch to the "dot" display.  It traces the retrieval by printing dots on the screen,
\par            each dot representing a fixed amount of downloaded data.
\par 
\par            When using the dotted retrieval, you may also set the style by specifying the type as dot:style.  Different
\par            styles assign different meaning to one dot.  With the "default" style each dot represents 1K, there are ten
\par            dots in a cluster and 50 dots in a line.  The "binary" style has a more "computer"-like orientation---8K
\par            dots, 16-dots clusters and 48 dots per line (which makes for 384K lines).  The "mega" style is suitable for
\par            downloading very large files---each dot represents 64K retrieved, there are eight dots in a cluster, and 48
\par            dots on each line (so each line contains 3M).
\par 
\par            Note that you can set the default style using the "progress" command in .wgetrc.  That setting may be
\par            overridden from the command line.  The exception is that, when the output is not a TTY, the "dot" progress
\par            will be favored over "bar".  To force the bar output, use --progress=bar:force.
\par 
\par        -N
\par        --timestamping
\par            Turn on time-stamping.
\par 
\par        -S
\par        --server-response
\par            Print the headers sent by HTTP servers and responses sent by FTP servers.
\par 
\par        --spider
\par            When invoked with this option, Wget will behave as a Web spider, which means that it will not download the
\par            pages, just check that they are there.  For example, you can use Wget to check your bookmarks:
\par 
\par                    wget --spider --force-html -i bookmarks.html
\par 
\par            This feature needs much more work for Wget to get close to the functionality of real web spiders.
\par 
\par        -T seconds
\par        --timeout=seconds
\par            Set the network timeout to seconds seconds.  This is equivalent to specifying --dns-timeout,
\par            --connect-timeout, and --read-timeout, all at the same time.
\par 
\par            When interacting with the network, Wget can check for timeout and abort the operation if it takes too long.
\par            This prevents anomalies like hanging reads and infinite connects.  The only timeout enabled by default is a
\par            900-second read timeout.  Setting a timeout to 0 disables it altogether.  Unless you know what you are doing,
\par            it is best not to change the default timeout settings.
\par 
\par            All timeout-related options accept decimal values, as well as subsecond values.  For example, 0.1 seconds is
\par            a legal (though unwise) choice of timeout.  Subsecond timeouts are useful for checking server response times
\par            or for testing network latency.
\par 
\par        --dns-timeout=seconds
\par            Set the DNS lookup timeout to seconds seconds.  DNS lookups that don\rquote t complete within the specified time
\par            will fail.  By default, there is no timeout on DNS lookups, other than that implemented by system libraries.
\par 
\par        --connect-timeout=seconds
\par            Set the connect timeout to seconds seconds.  TCP connections that take longer to establish will be aborted.
\par            By default, there is no connect timeout, other than that implemented by system libraries.
\par 
\par        --read-timeout=seconds
\par            Set the read (and write) timeout to seconds seconds.  The "time" of this timeout refers to idle time: if, at
\par            any point in the download, no data is received for more than the specified number of seconds, reading fails
\par            and the download is restarted.  This option does not directly affect the duration of the entire download.
\par 
\par            Of course, the remote server may choose to terminate the connection sooner than this option requires.  The
\par            default read timeout is 900 seconds.
\par 
\par        --limit-rate=amount
\par            Limit the download speed to amount bytes per second.  Amount may be expressed in bytes, kilobytes with the k
\par            suffix, or megabytes with the m suffix.  For example, --limit-rate=20k will limit the retrieval rate to
\par            20KB/s.  This is useful when, for whatever reason, you don\rquote t want Wget to consume the entire available
\par            bandwidth.
\par 
\par            This option allows the use of decimal numbers, usually in conjunction with power suffixes; for example,
\par            --limit-rate=2.5k is a legal value.
\par 
\par            Note that Wget implements the limiting by sleeping the appropriate amount of time after a network read that
\par            took less time than specified by the rate.  Eventually this strategy causes the TCP transfer to slow down to
\par            approximately the specified rate.  However, it may take some time for this balance to be achieved, so don\rquote t
\par            be surprised if limiting the rate doesn\rquote t work well with very small files.
\par 
\par        -w seconds
\par        --wait=seconds
\par            Wait the specified number of seconds between the retrievals.  Use of this option is recommended, as it
\par            lightens the server load by making the requests less frequent.  Instead of in seconds, the time can be
\par            specified in minutes using the "m" suffix, in hours using "h" suffix, or in days using "d" suffix.
\par 
\par            Specifying a large value for this option is useful if the network or the destination host is down, so that
\par            Wget can wait long enough to reasonably expect the network error to be fixed before the retry.  The waiting
\par            interval specified by this function is influenced by "--random-wait", which see.
\par 
\par        --waitretry=seconds
\par            If you don\rquote t want Wget to wait between every retrieval, but only between retries of failed downloads, you can
\par            use this option.  Wget will use linear backoff, waiting 1 second after the first failure on a given file,
\par            then waiting 2 seconds after the second failure on that file, up to the maximum number of seconds you
\par            specify.  Therefore, a value of 10 will actually make Wget wait up to (1 + 2 + ... + 10) = 55 seconds per
\par            file.
\par 
\par            By default, Wget will assume a value of 10 seconds.
\par 
\par        --random-wait
\par            Some web sites may perform log analysis to identify retrieval programs such as Wget by looking for
\par            statistically significant similarities in the time between requests. This option causes the time between
\par            requests to vary between 0.5 and 1.5 * wait seconds, where wait was specified using the --wait option, in
\par            order to mask Wget\rquote s presence from such analysis.
\par 
\par            A 2001 article in a publication devoted to development on a popular consumer platform provided code to
\par            perform this analysis on the fly.  Its author suggested blocking at the class C address level to ensure
\par            automated retrieval programs were blocked despite changing DHCP-supplied addresses.
\par 
\par            The --random-wait option was inspired by this ill-advised recommendation to block many unrelated users from a
\par            web site due to the actions of one.
\par 
\par        --no-proxy
\par            Don\rquote t use proxies, even if the appropriate *_proxy environment variable is defined.
\par 
\par        -Q quota
\par        --quota=quota
\par            Specify download quota for automatic retrievals.  The value can be specified in bytes (default), kilobytes
\par            (with k suffix), or megabytes (with m suffix).
\par 
\par            Note that quota will never affect downloading a single file.  So if you specify wget -Q10k
\par            ftp://wuarchive.wustl.edu/ls-lR.gz, all of the ls-lR.gz will be downloaded.  The same goes even when several
\par            URLs are specified on the command-line.  However, quota is respected when retrieving either recursively, or
\par            from an input file.  Thus you may safely type wget -Q2m -i sites---download will be aborted when the quota is
\par            exceeded.
\par 
\par            Setting quota to 0 or to inf unlimits the download quota.
\par 
\par        --no-dns-cache
\par            Turn off caching of DNS lookups.  Normally, Wget remembers the IP addresses it looked up from DNS so it
\par            doesn\rquote t have to repeatedly contact the DNS server for the same (typically small) set of hosts it retrieves
\par            from.  This cache exists in memory only; a new Wget run will contact DNS again.
\par 
\par            However, it has been reported that in some situations it is not desirable to cache host names, even for the
\par            duration of a short-running application like Wget.  With this option Wget issues a new DNS lookup (more
\par            precisely, a new call to "gethostbyname" or "getaddrinfo") each time it makes a new connection.  Please note
\par            that this option will not affect caching that might be performed by the resolving library or by an external
\par            caching layer, such as NSCD.
\par 
\par            If you don\rquote t understand exactly what this option does, you probably won\rquote t need it.
\par 
\par        --restrict-file-names=modes
\par            Change which characters found in remote URLs must be escaped during generation of local filenames.
\par            Characters that are restricted by this option are escaped, i.e. replaced with %HH, where HH is the
\par            hexadecimal number that corresponds to the restricted character. This option may also be used to force all
\par            alphabetical cases to be either lower- or uppercase.
\par 
\par            By default, Wget escapes the characters that are not valid or safe as part of file names on your operating
\par            system, as well as control characters that are typically unprintable.  This option is useful for changing
\par            these defaults, perhaps because you are downloading to a non-native partition, or because you want to disable
\par            escaping of the control characters, or you want to further restrict characters to only those in the ASCII
\par            range of values.
\par 
\par            The modes are a comma-separated set of text values. The acceptable values are unix, windows, nocontrol,
\par            ascii, lowercase, and uppercase. The values unix and windows are mutually exclusive (one will override the
\par            other), as are lowercase and uppercase. Those last are special cases, as they do not change the set of
\par            characters that would be escaped, but rather force local file paths to be converted either to lower- or
\par            uppercase.
\par 
\par            When "unix" is specified, Wget escapes the character / and the control characters in the ranges 0--31 and
\par            128--159.  This is the default on Unix-like operating systems.
\par 
\par            When "windows" is given, Wget escapes the characters \\, |, /, :, ?, ", *, <, >, and the control characters in
\par            the ranges 0--31 and 128--159.  In addition to this, Wget in Windows mode uses + instead of : to separate
\par            host and port in local file names, and uses @ instead of ? to separate the query portion of the file name
\par            from the rest.  Therefore, a URL that would be saved as www.xemacs.org:4300/search.pl?input=blah in Unix mode
\par            would be saved as www.xemacs.org+4300/search.pl@input=blah in Windows mode.  This mode is the default on
\par            Windows.
\par 
\par            If you specify nocontrol, then the escaping of the control characters is also switched off. This option may
\par            make sense when you are downloading URLs whose names contain UTF-8 characters, on a system which can save and
\par            display filenames in UTF-8 (some possible byte values used in UTF-8 byte sequences fall in the range of
\par            values designated by Wget as "controls").
\par 
\par            The ascii mode is used to specify that any bytes whose values are outside the range of ASCII characters (that
\par            is, greater than 127) shall be escaped. This can be useful when saving filenames whose encoding does not
\par            match the one used locally.
\par 
\par        -4
\par        --inet4-only
\par        -6
\par        --inet6-only
\par            Force connecting to IPv4 or IPv6 addresses.  With --inet4-only or -4, Wget will only connect to IPv4 hosts,
\par            ignoring AAAA records in DNS, and refusing to connect to IPv6 addresses specified in URLs.  Conversely, with
\par            --inet6-only or -6, Wget will only connect to IPv6 hosts and ignore A records and IPv4 addresses.
\par 
\par            Neither options should be needed normally.  By default, an IPv6-aware Wget will use the address family
\par            specified by the host\rquote s DNS record.  If the DNS responds with both IPv4 and IPv6 addresses, Wget will try
\par            them in sequence until it finds one it can connect to.  (Also see "--prefer-family" option described below.)
\par 
\par            These options can be used to deliberately force the use of IPv4 or IPv6 address families on dual family
\par            systems, usually to aid debugging or to deal with broken network configuration.  Only one of --inet6-only and
\par            --inet4-only may be specified at the same time.  Neither option is available in Wget compiled without IPv6
\par            support.
\par 
\par        --prefer-family=none/IPv4/IPv6
\par            When given a choice of several addresses, connect to the addresses with specified address family first.  The
\par            address order returned by DNS is used without change by default.
\par 
\par            This avoids spurious errors and connect attempts when accessing hosts that resolve to both IPv6 and IPv4
\par            addresses from IPv4 networks.  For example, www.kame.net resolves to 2001:200:0:8002:203:47ff:fea5:3085 and
\par            to 203.178.141.194.  When the preferred family is "IPv4", the IPv4 address is used first; when the preferred
\par            family is "IPv6", the IPv6 address is used first; if the specified value is "none", the address order
\par            returned by DNS is used without change.
\par 
\par            Unlike -4 and -6, this option doesn\rquote t inhibit access to any address family, it only changes the order in
\par            which the addresses are accessed.  Also note that the reordering performed by this option is stable---it
\par            doesn\rquote t affect order of addresses of the same family.  That is, the relative order of all IPv4 addresses and
\par            of all IPv6 addresses remains intact in all cases.
\par 
\par        --retry-connrefused
\par            Consider "connection refused" a transient error and try again.  Normally Wget gives up on a URL when it is
\par            unable to connect to the site because failure to connect is taken as a sign that the server is not running at
\par            all and that retries would not help.  This option is for mirroring unreliable sites whose servers tend to
\par            disappear for short periods of time.
\par 
\par        --user=user
\par        --password=password
\par            Specify the username user and password password for both FTP and HTTP file retrieval.  These parameters can
\par            be overridden using the --ftp-user and --ftp-password options for FTP connections and the --http-user and
\par            --http-password options for HTTP connections.
\par 
\par        --ask-password
\par            Prompt for a password for each connection established. Cannot be specified when --password is being used,
\par            because they are mutually exclusive.
\par 
\par        --no-iri
\par            Turn off internationalized URI (IRI) support. Use --iri to turn it on. IRI support is activated by default.
\par 
\par            You can set the default state of IRI support using the "iri" command in .wgetrc. That setting may be
\par            overridden from the command line.
\par 
\par        --local-encoding=encoding
\par            Force Wget to use encoding as the default system encoding. That affects how Wget converts URLs specified as
\par            arguments from locale to UTF-8 for IRI support.
\par 
\par            Wget use the function "nl_langinfo()" and then the "CHARSET" environment variable to get the locale. If it
\par            fails, ASCII is used.
\par 
\par            You can set the default local encoding using the "local_encoding" command in .wgetrc. That setting may be
\par            overridden from the command line.
\par 
\par        --remote-encoding=encoding
\par            Force Wget to use encoding as the default remote server encoding.  That affects how Wget converts URIs found
\par            in files from remote encoding to UTF-8 during a recursive fetch. This options is only useful for IRI support,
\par            for the interpretation of non-ASCII characters.
\par 
\par            For HTTP, remote encoding can be found in HTTP "Content-Type" header and in HTML "Content-Type http-equiv"
\par            meta tag.
\par 
\par            You can set the default encoding using the "remoteencoding" command in .wgetrc. That setting may be
\par            overridden from the command line.
\par 
\par    Directory Options
\par        -nd
\par        --no-directories
\par            Do not create a hierarchy of directories when retrieving recursively.  With this option turned on, all files
\par            will get saved to the current directory, without clobbering (if a name shows up more than once, the filenames
\par            will get extensions .n).
\par 
\par        -x
\par        --force-directories
\par            The opposite of -nd---create a hierarchy of directories, even if one would not have been created otherwise.
\par            E.g. wget -x http://fly.srk.fer.hr/robots.txt will save the downloaded file to fly.srk.fer.hr/robots.txt.
\par 
\par \plain \f1\fs18\cf1        -nH
\par        --no-host-directories
\par \plain \f1\fs18       \plain \f1\fs18\cf1      Disable generation of host-prefixed directories\plain \f1\fs18 .  By default, invoking Wget with -r http://fly.srk.fer.hr/
\par            will create a structure of directories beginning with fly.srk.fer.hr/.  This option disables such behavior.
\par 
\par        --protocol-directories
\par            Use the protocol name as a directory component of local file names.  For example, with this option, wget -r
\par            http://host will save to http/host/... rather than just to host/....
\par 
\par \plain \f1\fs18\cf1        --cut-dirs=number
\par \plain \f1\fs18        \plain \f1\fs18\cf1     Ignore number directory components. \plain \f1\fs18  This is useful for getting a fine-grained control over the directory
\par            where recursive retrieval will be saved.
\par 
\par            Take, for example, the directory at ftp://ftp.xemacs.org/pub/xemacs/.  If you retrieve it with -r, it will be
\par            saved locally under ftp.xemacs.org/pub/xemacs/.  \plain \f1\fs18\cf1 While the -nH option can remove the ftp.xemacs.org/ part,
\par \plain \f1\fs18            you are still stuck with pub/xemacs.  This is where --cut-dirs comes in handy; it makes Wget not "see" number
\par            remote directory components.  Here are several examples of how --cut-dirs option works.
\par \plain \f1\fs18\cf1 
\par                    No options        -> ftp.xemacs.org/pub/xemacs/
\par                    -nH               -> pub/xemacs/
\par                    -nH --cut-dirs=1  -> xemacs/
\par                    -nH --cut-dirs=2  -> .
\par 
\par                    --cut-dirs=1      -> ftp.xemacs.org/xemacs/
\par \plain \f1\fs18                    ...
\par 
\par            If you just want to get rid of the directory structure, this option is similar to a combination of -nd and
\par            -P.  However, unlike -nd, --cut-dirs does not lose with subdirectories---for instance, with -nH --cut-dirs=1,
\par            a beta/ subdirectory will be placed to xemacs/beta, as one would expect.
\par 
\par        -P prefix
\par        --directory-prefix=prefix
\par            Set directory prefix to prefix.  The directory prefix is the directory where all other files and
\par            subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current
\par            directory).
\par 
\par    HTTP Options
\par        --default-page=name
\par            Use name as the default file name when it isn\rquote t known (i.e., for URLs that end in a slash), instead of
\par            index.html.
\par 
\par        -E
\par        --adjust-extension
\par            If a file of type application/xhtml+xml or text/html is downloaded and the URL does not end with the regexp
\par            \\.[Hh][Tt][Mm][Ll]?, this option will cause the suffix .html to be appended to the local filename.  This is
\par            useful, for instance, when you\rquote re mirroring a remote site that uses .asp pages, but you want the mirrored
\par            pages to be viewable on your stock Apache server.  Another good use for this is when you\rquote re downloading CGI-
\par            generated materials.  A URL like http://site.com/article.cgi?25 will be saved as article.cgi?25.html.
\par 
\par            Note that filenames changed in this way will be re-downloaded every time you re-mirror a site, because Wget
\par            can\rquote t tell that the local X.html file corresponds to remote URL X (since it doesn\rquote t yet know that the URL
\par            produces output of type text/html or application/xhtml+xml.  To prevent this re-downloading, you must use -k
\par            and -K so that the original version of the file will be saved as X.orig.
\par 
\par            As of version 1.12, Wget will also ensure that any downloaded files of type text/css end in the suffix .css,
\par            and the option was renamed from --html-extension, to better reflect its new behavior. The old option name is
\par            still acceptable, but should now be considered deprecated.
\par 
\par            At some point in the future, this option may well be expanded to include suffixes for other types of content,
\par            including content types that are not parsed by Wget.
\par 
\par        --http-user=user
\par        --http-password=password
\par            Specify the username user and password password on an HTTP server.  According to the type of the challenge,
\par            Wget will encode them using either the "basic" (insecure), the "digest", or the Windows "NTLM" authentication
\par            scheme.
\par 
\par            Another way to specify username and password is in the URL itself.  Either method reveals your password to
\par            anyone who bothers to run "ps".  To prevent the passwords from being seen, store them in .wgetrc or .netrc,
\par            and make sure to protect those files from other users with "chmod".  If the passwords are really important,
\par            do not leave them lying in those files either---edit the files and delete them after Wget has started the
\par            download.
\par 
\par        --no-http-keep-alive
\par            Turn off the "keep-alive" feature for HTTP downloads.  Normally, Wget asks the server to keep the connection
\par            open so that, when you download more than one document from the same server, they get transferred over the
\par            same TCP connection.  This saves time and at the same time reduces the load on the server.
\par 
\par            This option is useful when, for some reason, persistent (keep-alive) connections don\rquote t work for you, for
\par            example due to a server bug or due to the inability of server-side scripts to cope with the connections.
\par 
\par        --no-cache
\par            Disable server-side cache.  In this case, Wget will send the remote server an appropriate directive (Pragma:
\par            no-cache) to get the file from the remote service, rather than returning the cached version.  This is
\par            especially useful for retrieving and flushing out-of-date documents on proxy servers.
\par 
\par            Caching is allowed by default.
\par 
\par        --no-cookies
\par            Disable the use of cookies.  Cookies are a mechanism for maintaining server-side state.  The server sends the
\par            client a cookie using the "Set-Cookie" header, and the client responds with the same cookie upon further
\par            requests.  Since cookies allow the server owners to keep track of visitors and for sites to exchange this
\par            information, some consider them a breach of privacy.  The default is to use cookies; however, storing cookies
\par            is not on by default.
\par 
\par        --load-cookies file
\par            Load cookies from file before the first HTTP retrieval.  file is a textual file in the format originally used
\par            by Netscape\rquote s cookies.txt file.
\par 
\par            You will typically use this option when mirroring sites that require that you be logged in to access some or
\par            all of their content.  The login process typically works by the web server issuing an HTTP cookie upon
\par            receiving and verifying your credentials.  The cookie is then resent by the browser when accessing that part
\par            of the site, and so proves your identity.
\par 
\par            Mirroring such a site requires Wget to send the same cookies your browser sends when communicating with the
\par            site.  This is achieved by --load-cookies---simply point Wget to the location of the cookies.txt file, and it
\par            will send the same cookies your browser would send in the same situation.  Different browsers keep textual
\par            cookie files in different locations:
\par 
\par            Netscape 4.x.
\par                The cookies are in ~/.netscape/cookies.txt.
\par 
\par            Mozilla and Netscape 6.x.
\par                Mozilla\rquote s cookie file is also named cookies.txt, located somewhere under ~/.mozilla, in the directory of
\par                your profile.  The full path usually ends up looking somewhat like ~/.mozilla/default/some-weird-
\par                string/cookies.txt.
\par 
\par            Internet Explorer.
\par                You can produce a cookie file Wget can use by using the File menu, Import and Export, Export Cookies.
\par                This has been tested with Internet Explorer 5; it is not guaranteed to work with earlier versions.
\par 
\par            Other browsers.
\par                If you are using a different browser to create your cookies, --load-cookies will only work if you can
\par                locate or produce a cookie file in the Netscape format that Wget expects.
\par 
\par            If you cannot use --load-cookies, there might still be an alternative.  If your browser supports a "cookie
\par            manager", you can use it to view the cookies used when accessing the site you\rquote re mirroring.  Write down the
\par            name and value of the cookie, and manually instruct Wget to send those cookies, bypassing the "official"
\par            cookie support:
\par 
\par                    wget --no-cookies --header "Cookie: <name>=<value>"
\par 
\par        --save-cookies file
\par            Save cookies to file before exiting.  This will not save cookies that have expired or that have no expiry
\par            time (so-called "session cookies"), but also see --keep-session-cookies.
\par 
\par        --keep-session-cookies
\par            When specified, causes --save-cookies to also save session cookies.  Session cookies are normally not saved
\par            because they are meant to be kept in memory and forgotten when you exit the browser.  Saving them is useful
\par            on sites that require you to log in or to visit the home page before you can access some pages.  With this
\par            option, multiple Wget runs are considered a single browser session as far as the site is concerned.
\par 
\par            Since the cookie file format does not normally carry session cookies, Wget marks them with an expiry
\par            timestamp of 0.  Wget\rquote s --load-cookies recognizes those as session cookies, but it might confuse other
\par            browsers.  Also note that cookies so loaded will be treated as other session cookies, which means that if you
\par            want --save-cookies to preserve them again, you must use --keep-session-cookies again.
\par 
\par        --ignore-length
\par            Unfortunately, some HTTP servers (CGI programs, to be more precise) send out bogus "Content-Length" headers,
\par            which makes Wget go wild, as it thinks not all the document was retrieved.  You can spot this syndrome if
\par            Wget retries getting the same document again and again, each time claiming that the (otherwise normal)
\par            connection has closed on the very same byte.
\par 
\par            With this option, Wget will ignore the "Content-Length" header---as if it never existed.
\par 
\par        --header=header-line
\par            Send header-line along with the rest of the headers in each HTTP request.  The supplied header is sent as-is,
\par            which means it must contain name and value separated by colon, and must not contain newlines.
\par 
\par            You may define more than one additional header by specifying --header more than once.
\par 
\par                    wget --header='Accept-Charset: iso-8859-2' \\
\par                         --header='Accept-Language: hr'        \\
\par                           http://fly.srk.fer.hr/
\par 
\par            Specification of an empty string as the header value will clear all previous user-defined headers.
\par 
\par            As of Wget 1.10, this option can be used to override headers otherwise generated automatically.  This example
\par            instructs Wget to connect to localhost, but to specify foo.bar in the "Host" header:
\par 
\par                    wget --header="Host: foo.bar" http://localhost/
\par 
\par            In versions of Wget prior to 1.10 such use of --header caused sending of duplicate headers.
\par 
\par        --max-redirect=number
\par            Specifies the maximum number of redirections to follow for a resource.  The default is 20, which is usually
\par            far more than necessary. However, on those occasions where you want to allow more (or fewer), this is the
\par            option to use.
\par 
\par        --proxy-user=user
\par        --proxy-password=password
\par            Specify the username user and password password for authentication on a proxy server.  Wget will encode them
\par            using the "basic" authentication scheme.
\par 
\par            Security considerations similar to those with --http-password pertain here as well.
\par 
\par        --referer=url
\par            Include \lquote Referer: url\rquote  header in HTTP request.  Useful for retrieving documents with server-side processing
\par            that assume they are always being retrieved by interactive web browsers and only come out properly when
\par            Referer is set to one of the pages that point to them.
\par 
\par        --save-headers
\par            Save the headers sent by the HTTP server to the file, preceding the actual contents, with an empty line as
\par            the separator.
\par 
\par        -U agent-string
\par        --user-agent=agent-string
\par            Identify as agent-string to the HTTP server.
\par 
\par            The HTTP protocol allows the clients to identify themselves using a "User-Agent" header field.  This enables
\par            distinguishing the WWW software, usually for statistical purposes or for tracing of protocol violations.
\par            Wget normally identifies as Wget/version, version being the current version number of Wget.
\par 
\par            However, some sites have been known to impose the policy of tailoring the output according to the
\par            "User-Agent"-supplied information.  While this is not such a bad idea in theory, it has been abused by
\par            servers denying information to clients other than (historically) Netscape or, more frequently, Microsoft
\par            Internet Explorer.  This option allows you to change the "User-Agent" line issued by Wget.  Use of this
\par            option is discouraged, unless you really know what you are doing.
\par 
\par            Specifying empty user agent with --user-agent="" instructs Wget not to send the "User-Agent" header in HTTP
\par            requests.
\par 
\par        --post-data=string
\par        --post-file=file
\par            Use POST as the method for all HTTP requests and send the specified data in the request body.  --post-data
\par            sends string as data, whereas --post-file sends the contents of file.  Other than that, they work in exactly
\par            the same way. In particular, they both expect content of the form "key1=value1&key2=value2", with percent-
\par            encoding for special characters; the only difference is that one expects its content as a command-line
\par            paramter and the other accepts its content from a file. In particular, --post-file is not for transmitting
\par            files as form attachments: those must appear as "key=value" data (with appropriate percent-coding) just like
\par            everything else. Wget does not currently support "multipart/form-data" for transmitting POST data; only
\par            "application/x-www-form-urlencoded". Only one of --post-data and --post-file should be specified.
\par 
\par            Please be aware that Wget needs to know the size of the POST data in advance.  Therefore the argument to
\par            "--post-file" must be a regular file; specifying a FIFO or something like /dev/stdin won\rquote t work.  It\rquote s not
\par            quite clear how to work around this limitation inherent in HTTP/1.0.  Although HTTP/1.1 introduces chunked
\par            transfer that doesn\rquote t require knowing the request length in advance, a client can\rquote t use chunked unless it
\par            knows it\rquote s talking to an HTTP/1.1 server.  And it can\rquote t know that until it receives a response, which in turn
\par            requires the request to have been completed -- a chicken-and-egg problem.
\par 
\par            Note: if Wget is redirected after the POST request is completed, it will not send the POST data to the
\par            redirected URL.  This is because URLs that process POST often respond with a redirection to a regular page,
\par            which does not desire or accept POST.  It is not completely clear that this behavior is optimal; if it
\par            doesn\rquote t work out, it might be changed in the future.
\par 
\par            This example shows how to log to a server using POST and then proceed to download the desired pages,
\par            presumably only accessible to authorized users:
\par 
\par                    # Log in to the server.  This can be done only once.
\par                    wget --save-cookies cookies.txt \\
\par                         --post-data 'user=foo&password=bar' \\
\par                         http://server.com/auth.php
\par 
\par                    # Now grab the page or pages we care about.
\par                    wget --load-cookies cookies.txt \\
\par                         -p http://server.com/interesting/article.php
\par 
\par            If the server is using session cookies to track user authentication, the above will not work because
\par            --save-cookies will not save them (and neither will browsers) and the cookies.txt file will be empty.  In
\par            that case use --keep-session-cookies along with --save-cookies to force saving of session cookies.
\par 
\par        --content-disposition
\par            If this is set to on, experimental (not fully-functional) support for "Content-Disposition" headers is
\par            enabled. This can currently result in extra round-trips to the server for a "HEAD" request, and is known to
\par            suffer from a few bugs, which is why it is not currently enabled by default.
\par 
\par            This option is useful for some file-downloading CGI programs that use "Content-Disposition" headers to
\par            describe what the name of a downloaded file should be.
\par 
\par        --auth-no-challenge
\par            If this option is given, Wget will send Basic HTTP authentication information (plaintext username and
\par            password) for all requests, just like Wget 1.10.2 and prior did by default.
\par 
\par            Use of this option is not recommended, and is intended only to support some few obscure servers, which never
\par            send HTTP authentication challenges, but accept unsolicited auth info, say, in addition to form-based
\par            authentication.
\par 
\par    HTTPS (SSL/TLS) Options
\par        To support encrypted HTTP (HTTPS) downloads, Wget must be compiled with an external SSL library, currently
\par        OpenSSL.  If Wget is compiled without SSL support, none of these options are available.
\par 
\par        --secure-protocol=protocol
\par            Choose the secure protocol to be used.  Legal values are auto, SSLv2, SSLv3, and TLSv1.  If auto is used, the
\par            SSL library is given the liberty of choosing the appropriate protocol automatically, which is achieved by
\par            sending an SSLv2 greeting and announcing support for SSLv3 and TLSv1.  This is the default.
\par 
\par            Specifying SSLv2, SSLv3, or TLSv1 forces the use of the corresponding protocol.  This is useful when talking
\par            to old and buggy SSL server implementations that make it hard for OpenSSL to choose the correct protocol
\par            version.  Fortunately, such servers are quite rare.
\par 
\par        --no-check-certificate
\par            Don\rquote t check the server certificate against the available certificate authorities.  Also don\rquote t require the URL
\par            host name to match the common name presented by the certificate.
\par 
\par            As of Wget 1.10, the default is to verify the server\rquote s certificate against the recognized certificate
\par            authorities, breaking the SSL handshake and aborting the download if the verification fails.  Although this
\par            provides more secure downloads, it does break interoperability with some sites that worked with previous Wget
\par            versions, particularly those using self-signed, expired, or otherwise invalid certificates.  This option
\par            forces an "insecure" mode of operation that turns the certificate verification errors into warnings and
\par            allows you to proceed.
\par 
\par            If you encounter "certificate verification" errors or ones saying that "common name doesn\rquote t match requested
\par            host name", you can use this option to bypass the verification and proceed with the download.  Only use this
\par            option if you are otherwise convinced of the site\rquote s authenticity, or if you really don\rquote t care about the
\par            validity of its certificate.  It is almost always a bad idea not to check the certificates when transmitting
\par            confidential or important data.
\par 
\par        --certificate=file
\par            Use the client certificate stored in file.  This is needed for servers that are configured to require
\par            certificates from the clients that connect to them.  Normally a certificate is not required and this switch
\par            is optional.
\par 
\par        --certificate-type=type
\par            Specify the type of the client certificate.  Legal values are PEM (assumed by default) and DER, also known as
\par            ASN1.
\par 
\par        --private-key=file
\par            Read the private key from file.  This allows you to provide the private key in a file separate from the
\par            certificate.
\par 
\par        --private-key-type=type
\par            Specify the type of the private key.  Accepted values are PEM (the default) and DER.
\par 
\par        --ca-certificate=file
\par            Use file as the file with the bundle of certificate authorities ("CA") to verify the peers.  The certificates
\par            must be in PEM format.
\par 
\par            Without this option Wget looks for CA certificates at the system-specified locations, chosen at OpenSSL
\par            installation time.
\par 
\par        --ca-directory=directory
\par            Specifies directory containing CA certificates in PEM format.  Each file contains one CA certificate, and the
\par            file name is based on a hash value derived from the certificate.  This is achieved by processing a
\par            certificate directory with the "c_rehash" utility supplied with OpenSSL.  Using --ca-directory is more
\par            efficient than --ca-certificate when many certificates are installed because it allows Wget to fetch
\par            certificates on demand.
\par 
\par            Without this option Wget looks for CA certificates at the system-specified locations, chosen at OpenSSL
\par            installation time.
\par 
\par        --random-file=file
\par            Use file as the source of random data for seeding the pseudo-random number generator on systems without
\par            /dev/random.
\par 
\par            On such systems the SSL library needs an external source of randomness to initialize.  Randomness may be
\par            provided by EGD (see --egd-file below) or read from an external source specified by the user.  If this option
\par            is not specified, Wget looks for random data in $RANDFILE or, if that is unset, in $HOME/.rnd.  If none of
\par            those are available, it is likely that SSL encryption will not be usable.
\par 
\par            If you\rquote re getting the "Could not seed OpenSSL PRNG; disabling SSL."  error, you should provide random data
\par            using some of the methods described above.
\par 
\par        --egd-file=file
\par            Use file as the EGD socket.  EGD stands for Entropy Gathering Daemon, a user-space program that collects data
\par            from various unpredictable system sources and makes it available to other programs that might need it.
\par            Encryption software, such as the SSL library, needs sources of non-repeating randomness to seed the random
\par            number generator used to produce cryptographically strong keys.
\par 
\par            OpenSSL allows the user to specify his own source of entropy using the "RAND_FILE" environment variable.  If
\par            this variable is unset, or if the specified file does not produce enough randomness, OpenSSL will read random
\par            data from EGD socket specified using this option.
\par 
\par            If this option is not specified (and the equivalent startup command is not used), EGD is never contacted.
\par            EGD is not needed on modern Unix systems that support /dev/random.
\par 
\par    FTP Options
\par        --ftp-user=user
\par        --ftp-password=password
\par            Specify the username user and password password on an FTP server.  Without this, or the corresponding startup
\par            option, the password defaults to -wget@, normally used for anonymous FTP.
\par 
\par            Another way to specify username and password is in the URL itself.  Either method reveals your password to
\par            anyone who bothers to run "ps".  To prevent the passwords from being seen, store them in .wgetrc or .netrc,
\par            and make sure to protect those files from other users with "chmod".  If the passwords are really important,
\par            do not leave them lying in those files either---edit the files and delete them after Wget has started the
\par            download.
\par 
\par        --no-remove-listing
\par            Don\rquote t remove the temporary .listing files generated by FTP retrievals.  Normally, these files contain the raw
\par            directory listings received from FTP servers.  Not removing them can be useful for debugging purposes, or
\par            when you want to be able to easily check on the contents of remote server directories (e.g. to verify that a
\par            mirror you\rquote re running is complete).
\par 
\par            Note that even though Wget writes to a known filename for this file, this is not a security hole in the
\par            scenario of a user making .listing a symbolic link to /etc/passwd or something and asking "root" to run Wget
\par            in his or her directory.  Depending on the options used, either Wget will refuse to write to .listing, making
\par            the globbing/recursion/time-stamping operation fail, or the symbolic link will be deleted and replaced with
\par            the actual .listing file, or the listing will be written to a .listing.number file.
\par 
\par            Even though this situation isn\rquote t a problem, though, "root" should never run Wget in a non-trusted user\rquote s
\par            directory.  A user could do something as simple as linking index.html to /etc/passwd and asking "root" to run
\par            Wget with -N or -r so the file will be overwritten.
\par 
\par        --no-glob
\par            Turn off FTP globbing.  Globbing refers to the use of shell-like special characters (wildcards), like *, ?, [
\par            and ] to retrieve more than one file from the same directory at once, like:
\par 
\par                    wget ftp://gnjilux.srk.fer.hr/*.msg
\par 
\par            By default, globbing will be turned on if the URL contains a globbing character.  This option may be used to
\par            turn globbing on or off permanently.
\par 
\par            You may have to quote the URL to protect it from being expanded by your shell.  Globbing makes Wget look for
\par            a directory listing, which is system-specific.  This is why it currently works only with Unix FTP servers
\par            (and the ones emulating Unix "ls" output).
\par 
\par        --no-passive-ftp
\par            Disable the use of the passive FTP transfer mode.  Passive FTP mandates that the client connect to the server
\par            to establish the data connection rather than the other way around.
\par 
\par            If the machine is connected to the Internet directly, both passive and active FTP should work equally well.
\par            Behind most firewall and NAT configurations passive FTP has a better chance of working.  However, in some
\par            rare firewall configurations, active FTP actually works when passive FTP doesn\rquote t.  If you suspect this to be
\par            the case, use this option, or set "passive_ftp=off" in your init file.
\par 
\par        --retr-symlinks
\par            Usually, when retrieving FTP directories recursively and a symbolic link is encountered, the linked-to file
\par            is not downloaded.  Instead, a matching symbolic link is created on the local filesystem.  The pointed-to
\par            file will not be downloaded unless this recursive retrieval would have encountered it separately and
\par            downloaded it anyway.
\par 
\par            When --retr-symlinks is specified, however, symbolic links are traversed and the pointed-to files are
\par            retrieved.  At this time, this option does not cause Wget to traverse symlinks to directories and recurse
\par            through them, but in the future it should be enhanced to do this.
\par 
\par            Note that when retrieving a file (not a directory) because it was specified on the command-line, rather than
\par            because it was recursed to, this option has no effect.  Symbolic links are always traversed in this case.
\par 
\par    Recursive Retrieval Options
\par        -r
\par        --recursive
\par            Turn on recursive retrieving.
\par 
\par        -l depth
\par        --level=depth
\par            Specify recursion maximum depth level depth.  The default maximum depth is 5.
\par 
\par        --delete-after
\par            This option tells Wget to delete every single file it downloads, after having done so.  It is useful for pre-
\par            fetching popular pages through a proxy, e.g.:
\par 
\par                    wget -r -nd --delete-after http://whatever.com/~popular/page/
\par 
\par            The -r option is to retrieve recursively, and -nd to not create directories.
\par 
\par            Note that --delete-after deletes files on the local machine.  It does not issue the DELE command to remote
\par            FTP sites, for instance.  Also note that when --delete-after is specified, --convert-links is ignored, so
\par            .orig files are simply not created in the first place.
\par 
\par        -k
\par        --convert-links
\par            After the download is complete, convert the links in the document to make them suitable for local viewing.
\par            This affects not only the visible hyperlinks, but any part of the document that links to external content,
\par            such as embedded images, links to style sheets, hyperlinks to non-HTML content, etc.
\par 
\par            Each link will be changed in one of the two ways:
\par 
\par            \uc2\u183 \'a1\'a4   The links to files that have been downloaded by Wget will be changed to refer to the file they point to\uc1
\par                as a relative link.
\par 
\par                Example: if the downloaded file /foo/doc.html links to /bar/img.gif, also downloaded, then the link in
\par                doc.html will be modified to point to ../bar/img.gif.  This kind of transformation works reliably for
\par                arbitrary combinations of directories.
\par 
\par            \uc2\u183 \'a1\'a4   The links to files that have not been downloaded by Wget will be changed to include host name and\uc1
\par                absolute path of the location they point to.
\par 
\par                Example: if the downloaded file /foo/doc.html links to /bar/img.gif (or to ../bar/img.gif), then the link
\par                in doc.html will be modified to point to http://hostname/bar/img.gif.
\par 
\par            Because of this, local browsing works reliably: if a linked file was downloaded, the link will refer to its
\par            local name; if it was not downloaded, the link will refer to its full Internet address rather than presenting
\par            a broken link.  The fact that the former links are converted to relative links ensures that you can move the
\par            downloaded hierarchy to another directory.
\par 
\par            Note that only at the end of the download can Wget know which links have been downloaded.  Because of that,
\par            the work done by -k will be performed at the end of all the downloads.
\par 
\par        -K
\par        --backup-converted
\par            When converting a file, back up the original version with a .orig suffix.  Affects the behavior of -N.
\par 
\par        -m
\par        --mirror
\par            Turn on options suitable for mirroring.  This option turns on recursion and time-stamping, sets infinite
\par            recursion depth and keeps FTP directory listings.  It is currently equivalent to -r -N -l inf
\par            --no-remove-listing.
\par 
\par        -p
\par        --page-requisites
\par            This option causes Wget to download all the files that are necessary to properly display a given HTML page.
\par            This includes such things as inlined images, sounds, and referenced stylesheets.
\par 
\par            Ordinarily, when downloading a single HTML page, any requisite documents that may be needed to display it
\par            properly are not downloaded.  Using -r together with -l can help, but since Wget does not ordinarily
\par            distinguish between external and inlined documents, one is generally left with "leaf documents" that are
\par            missing their requisites.
\par 
\par            For instance, say document 1.html contains an "<IMG>" tag referencing 1.gif and an "<A>" tag pointing to
\par            external document 2.html.  Say that 2.html is similar but that its image is 2.gif and it links to 3.html.
\par            Say this continues up to some arbitrarily high number.
\par 
\par            If one executes the command:
\par 
\par                    wget -r -l 2 http://<site>/1.html
\par 
\par            then 1.html, 1.gif, 2.html, 2.gif, and 3.html will be downloaded.  As you can see, 3.html is without its
\par            requisite 3.gif because Wget is simply counting the number of hops (up to 2) away from 1.html in order to
\par            determine where to stop the recursion.  However, with this command:
\par 
\par                    wget -r -l 2 -p http://<site>/1.html
\par 
\par            all the above files and 3.html\rquote s requisite 3.gif will be downloaded.  Similarly,
\par 
\par                    wget -r -l 1 -p http://<site>/1.html
\par 
\par            will cause 1.html, 1.gif, 2.html, and 2.gif to be downloaded.  One might think that:
\par 
\par                    wget -r -l 0 -p http://<site>/1.html
\par 
\par            would download just 1.html and 1.gif, but unfortunately this is not the case, because -l 0 is equivalent to
\par            -l inf---that is, infinite recursion.  To download a single HTML page (or a handful of them, all specified on
\par            the command-line or in a -i URL input file) and its (or their) requisites, simply leave off -r and -l:
\par 
\par                    wget -p http://<site>/1.html
\par 
\par            Note that Wget will behave as if -r had been specified, but only that single page and its requisites will be
\par            downloaded.  Links from that page to external documents will not be followed.  Actually, to download a single
\par            page and all its requisites (even if they exist on separate websites), and make sure the lot displays
\par            properly locally, this author likes to use a few options in addition to -p:
\par 
\par                    wget -E -H -k -K -p http://<site>/<document>
\par 
\par            To finish off this topic, it\rquote s worth knowing that Wget\rquote s idea of an external document link is any URL
\par            specified in an "<A>" tag, an "<AREA>" tag, or a "<LINK>" tag other than "<LINK REL="stylesheet">".
\par 
\par        --strict-comments
\par            Turn on strict parsing of HTML comments.  The default is to terminate comments at the first occurrence of
\par            -->.
\par 
\par            According to specifications, HTML comments are expressed as SGML declarations.  Declaration is special markup
\par            that begins with <! and ends with >, such as <!DOCTYPE ...>, that may contain comments between a pair of --
\par            delimiters.  HTML comments are "empty declarations", SGML declarations without any non-comment text.
\par            Therefore, <!--foo--> is a valid comment, and so is <!--one-- --two-->, but <!--1--2--> is not.
\par 
\par            On the other hand, most HTML writers don\rquote t perceive comments as anything other than text delimited with <!--
\par            and -->, which is not quite the same.  For example, something like <!------------> works as a valid comment
\par            as long as the number of dashes is a multiple of four (!).  If not, the comment technically lasts until the
\par            next --, which may be at the other end of the document.  Because of this, many popular browsers completely
\par            ignore the specification and implement what users have come to expect: comments delimited with <!-- and -->.
\par 
\par            Until version 1.9, Wget interpreted comments strictly, which resulted in missing links in many web pages that
\par            displayed fine in browsers, but had the misfortune of containing non-compliant comments.  Beginning with
\par            version 1.9, Wget has joined the ranks of clients that implements "naive" comments, terminating each comment
\par            at the first occurrence of -->.
\par 
\par            If, for whatever reason, you want strict comment parsing, use this option to turn it on.
\par 
\par    Recursive Accept/Reject Options
\par        -A acclist --accept acclist
\par        -R rejlist --reject rejlist
\par            Specify comma-separated lists of file name suffixes or patterns to accept or reject. Note that if any of the
\par            wildcard characters, *, ?, [ or ], appear in an element of acclist or rejlist, it will be treated as a
\par            pattern, rather than a suffix.
\par 
\par        -D domain-list
\par        --domains=domain-list
\par            Set domains to be followed.  domain-list is a comma-separated list of domains.  Note that it does not turn on
\par            -H.
\par 
\par        --exclude-domains domain-list
\par            Specify the domains that are not to be followed..
\par 
\par        --follow-ftp
\par            Follow FTP links from HTML documents.  Without this option, Wget will ignore all the FTP links.
\par 
\par        --follow-tags=list
\par            Wget has an internal table of HTML tag / attribute pairs that it considers when looking for linked documents
\par            during a recursive retrieval.  If a user wants only a subset of those tags to be considered, however, he or
\par            she should be specify such tags in a comma-separated list with this option.
\par 
\par        --ignore-tags=list
\par            This is the opposite of the --follow-tags option.  To skip certain HTML tags when recursively looking for
\par            documents to download, specify them in a comma-separated list.
\par 
\par            In the past, this option was the best bet for downloading a single page and its requisites, using a command-
\par            line like:
\par 
\par                    wget --ignore-tags=a,area -H -k -K -r http://<site>/<document>
\par 
\par            However, the author of this option came across a page with tags like "<LINK REL="home" HREF="/">" and came to
\par            the realization that specifying tags to ignore was not enough.  One can\rquote t just tell Wget to ignore "<LINK>",
\par            because then stylesheets will not be downloaded.  Now the best bet for downloading a single page and its
\par            requisites is the dedicated --page-requisites option.
\par 
\par        --ignore-case
\par            Ignore case when matching files and directories.  This influences the behavior of -R, -A, -I, and -X options,
\par            as well as globbing implemented when downloading from FTP sites.  For example, with this option, -A *.txt
\par            will match file1.txt, but also file2.TXT, file3.TxT, and so on.
\par 
\par        -H
\par        --span-hosts
\par            Enable spanning across hosts when doing recursive retrieving.
\par 
\par        -L
\par        --relative
\par            Follow relative links only.  Useful for retrieving a specific home page without any distractions, not even
\par            those from the same hosts.
\par 
\par        -I list
\par        --include-directories=list
\par            Specify a comma-separated list of directories you wish to follow when downloading.  Elements of list may
\par            contain wildcards.
\par 
\par        -X list
\par        --exclude-directories=list
\par            Specify a comma-separated list of directories you wish to exclude from download.  Elements of list may
\par            contain wildcards.
\par 
\par        -np
\par        --no-parent
\par            Do not ever ascend to the parent directory when retrieving recursively.  This is a useful option, since it
\par            guarantees that only the files below a certain hierarchy will be downloaded.
\par 
\par EXIT STATUS
\par        Wget may return one of several error codes if it encounters problems.
\par 
\par        0   No problems occurred.
\par 
\par        1   Generic error code.
\par 
\par        2   Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc...
\par 
\par        3   File I/O error.
\par 
\par        4   Network failure.
\par 
\par        5   SSL verification failure.
\par 
\par        6   Username/password authentication failure.
\par 
\par        7   Protocol errors.
\par 
\par        8   Server issued an error response.
\par 
\par        With the exceptions of 0 and 1, the lower-numbered exit codes take precedence over higher-numbered ones, when
\par        multiple types of errors are encountered.
\par 
\par        In versions of Wget prior to 1.12, Wget\rquote s exit status tended to be unhelpful and inconsistent. Recursive
\par        downloads would virtually always return 0 (success), regardless of any issues encountered, and non-recursive
\par        fetches only returned the status corresponding to the most recently-attempted download.
\par 
\par FILES
\par        /etc/wgetrc
\par            Default location of the global startup file.
\par 
\par        .wgetrc
\par            User startup file.
\par 
\par BUGS
\par        You are welcome to submit bug reports via the GNU Wget bug tracker (see
\par        <http://wget.addictivecode.org/BugTracker>).
\par 
\par        Before actually submitting a bug report, please try to follow a few simple guidelines.
\par 
\par        1.  Please try to ascertain that the behavior you see really is a bug.  If Wget crashes, it\rquote s a bug.  If Wget
\par            does not behave as documented, it\rquote s a bug.  If things work strange, but you are not sure about the way they
\par            are supposed to work, it might well be a bug, but you might want to double-check the documentation and the
\par            mailing lists.
\par 
\par        2.  Try to repeat the bug in as simple circumstances as possible.  E.g. if Wget crashes while downloading wget
\par            -rl0 -kKE -t5 --no-proxy http://yoyodyne.com -o /tmp/log, you should try to see if the crash is repeatable,
\par            and if will occur with a simpler set of options.  You might even try to start the download at the page where
\par            the crash occurred to see if that page somehow triggered the crash.
\par 
\par            Also, while I will probably be interested to know the contents of your .wgetrc file, just dumping it into the
\par            debug message is probably a bad idea.  Instead, you should first try to see if the bug repeats with .wgetrc
\par            moved out of the way.  Only if it turns out that .wgetrc settings affect the bug, mail me the relevant parts
\par            of the file.
\par 
\par        3.  Please start Wget with -d option and send us the resulting output (or relevant parts thereof).  If Wget was
\par            compiled without debug support, recompile it---it is much easier to trace bugs with debug support on.
\par 
\par            Note: please make sure to remove any potentially sensitive information from the debug log before sending it
\par            to the bug address.  The "-d" won\rquote t go out of its way to collect sensitive information, but the log will
\par            contain a fairly complete transcript of Wget\rquote s communication with the server, which may include passwords and
\par            pieces of downloaded data.  Since the bug address is publically archived, you may assume that all bug reports
\par            are visible to the public.
\par 
\par        4.  If Wget has crashed, try to run it in a debugger, e.g. "gdb `which wget` core" and type "where" to get the
\par            backtrace.  This may not work if the system administrator has disabled core files, but it is safe to try.
\par 
\par SEE ALSO
\par        This is not the complete manual for GNU Wget.  For more complete information, including more detailed
\par        explanations of some of the options, and a number of commands available for use with .wgetrc files and the -e
\par        option, see the GNU Info entry for wget.
\par 
\par AUTHOR
\par        Originally written by Hrvoje Niksic <hniksic@xemacs.org>.  Currently maintained by Micah Cowan
\par        <micah@cowan.name>.
\par 
\par COPYRIGHT
\par        Copyright (c) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software
\par        Foundation, Inc.
\par 
\par        Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free
\par        Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no
\par        Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the
\par        section entitled "GNU Free Documentation License".
\par 
\par GNU Wget 1.12                     2010-08-25                           WGET(1)
\par (END) 
\par \plain \f1\fs18\cf2 ---------------------------------------------------------------------------------------------------------------------------\par}