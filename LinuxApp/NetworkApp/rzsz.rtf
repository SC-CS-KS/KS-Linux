{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}{\f4\fnil\fcharset0 Courier New;}{\f5\fnil\fcharset2 Wingdings;}}{\colortbl;\red0\green0\blue255;\red128\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1556964289
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f4\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f4\fs24}
{\listlevel\levelnfc23\leveljc0\li1800\fi-360\jclisttab\tx1800{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f5\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li2160\fi-360\jclisttab\tx2160{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f5\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li2520\fi-360\jclisttab\tx2520{\leveltext\'01o;}{\levelnumbers;}\f4\fs24}
{\listlevel\levelnfc23\leveljc0\li2520\fi-360\jclisttab\tx2520{\leveltext\'01o;}{\levelnumbers;}\f4\fs24}
{\listlevel\levelnfc23\leveljc0\li2520\fi-360\jclisttab\tx2520{\leveltext\'01o;}{\levelnumbers;}\f4\fs24}
{\listlevel\levelnfc23\leveljc0\li2520\fi-360\jclisttab\tx2520{\leveltext\'01o;}{\levelnumbers;}\f4\fs24}
\listid1703082697}
{\list\listtemplateid791891956\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid149087177}
}
{\*\listoverridetable
{\listoverride\listid1703082697\listoverridecount0\ls1}
{\listoverride\listid149087177\listoverridecount0\ls2}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 rz/sz
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 RZ(1)                                                                                                                                        RZ(1)
\par \plain \f1\b\fs20 NAME
\par \plain \f1\fs20\cf1        rx, rb, rz - XMODEM, YMODEM, ZMODEM (Batch) file receive
\par \plain \f1\fs20 
\par \plain \f1\b\fs20 SYNOPSIS
\par \plain \f1\fs20        rz [- +8abeOpqRtTuUvy]
\par        rb [- +abqRtuUvy]
\par        rx [- abceqRtuUv] file
\par        [-][v]rzCOMMAND
\par 
\par DESCRIPTION
\par        This  program  uses error correcting protocols to receive files over a dial-in serial port from a variety of programs running under PC-DOS,
\par        CP/M, Unix, and other operating systems.  It is invoked from a shell prompt manually, or automatically as a result of an "sz file ..." com-
\par        mand given to the calling program.
\par 
\par        While  rz  is smart enough to be called from cu(1), very few versions of cu(1) are smart enough to allow rz to work properly.  Unix flavors
\par        of Professional-YAM are available for such dial-out application.
\par 
\par        Rz (Receive ZMODEM) receives files with the ZMODEM batch protocol.  Pathnames are supplied by the sending program, and directories are made
\par        if  necessary  (and possible).  Normally, the "rz" command is automatically issued by the calling ZMODEM program, but some defective ZMODEM
\par        implementations may require starting rz the old fashioned way.
\par 
\par        Rb receives file(s) with YMODEM, accepting either standard 128 byte sectors or 1024 byte sectors (YAM  sb  -k  option).   The  user  should
\par        determine when the 1024 byte block length actually improves throughput without causing lost data or even system crashes.
\par 
\par        If  True YMODEM (Omen Technology trademark) file information (file length, etc.)  is received, the file length controls the number of bytes
\par        written to the output dataset, and the modify time and file mode (iff non zero) are set accordingly.
\par 
\par        If no True YMODEM file information is received, slashes in the pathname are changed to underscore, and any trailing period in the  pathname
\par        is  eliminated.   This  conversion  is useful for files received from CP/M systems.  With YMODEM, each file name is converted to lower case
\par        unless it contains one or more lower case letters.
\par 
\par        Rx receives a single file with XMODEM or XMODEM-1k protocol.  The user should determine when the 1024 byte block length  actually  improves
\par        throughput  without causing problems.  The user must supply the file name to both sending and receiving programs.  Up to 1023 garbage char-
\par        acters may be added to the received file.
\par 
\par        Rz may be invoked as rzCOMMAND (with an optional leading - as generated by login(1)).  For each received file, rz will  pipe  the  file  to
\par        ''COMMAND filename'' where filename is the name of the transmitted file with the file contents as standard input.
\par 
\par        Each file transfer is acknowledged when COMMAND exits with 0 status.  A non zero exit status terminates transfers.
\par 
\par        A  typical use for this form is rzrmail which calls rmail(1) to post mail to the user specified by the transmitted file name.  For example,
\par        sending the file "caf" from a PC-DOS system to rzrmail on a Unix system would result in the contents of the DOS file "caf" being mailed  to
\par        user "caf".
\par 
\par        On  some  Unix  systems, the login directory must contain a link to COMMAND as login sets SHELL=rsh which disallows absolute pathnames.  If
\par        invoked with a leading ''v'', rz will be verbose (see v option).  The following entry works for Unix SYS III/V:
\par                                                           rzrmail::5:1::/bin:/usr/local/rzrmail
\par        If the SHELL environment variable includes rsh , rbash or rksh (restricted shell), rz will not accept absolute pathnames or references to a
\par        parent directory, will not modify an existing file, and removes any files received in error.
\par 
\par        If  rz  is  invoked  with  stdout and stderr to different datasets, Verbose is set to 2, causing frame by frame progress reports to stderr.
\par        This may be disabled with the q option.
\par 
\par OPTIONS
\par        The meanings of the available options are:
\par 
\par        -+, --append
\par               append received data to an existing file (ZMODEM, ASCII only).
\par     \plain \f1\fs20\cf1    -a, --ascii
\par               Convert files to Unix conventions by stripping carriage returns and all characters beginning with the first Control Z (CP/M  end  of
\par               file).
\par        -b, --binary
\par               Binary (tell it like it is) file transfer override.
\par \plain \f1\fs20        -B NUMBER, --bufsize NUMBER
\par             Buffer  NUMBER  bytes  before  writing  to  disk.  Default ist 32768, which should be enough for most situations. If you have a slow
\par             machine or a bad disk interface or suffer from other hardware problems you might want to increase the buffersize.  -1 or auto use  a
\par             buffer  large  enough to buffer the whole file. Be careful with this options - things normally get worse, not better, if the machine
\par               starts to swap.
\par        -c, --with-crc
\par               XMODEM only. Use 16 bit CRC (normally a one byte checksum is used).
\par        -C, --allow-remote-commands
\par          allow remote command execution ( insecure ). This allows the sender to execute an arbitrary command through system () or  execl  ().
\par               Default is to disable this feature (?). This option is ignored if running in restricted mode.
\par        -D, --null
\par               Output file data to /dev/null; for testing.  (Unix only)
\par        --delay-startup N
\par               Wait N seconds before doing anything.
\par  \plain \f1\fs20\cf2       -e, --escape
\par               Force sender to escape all control characters; normally XON, XOFF, DLE, CR-@-CR, and Ctrl-X are escaped.
\par \plain \f1\fs20        -E, --rename
\par               Rename incoming file if target filename already exists. The new file name will have a dot and a number (0..999) appended.
\par        -h, --help
\par               give help screen.
\par        -m N, --min-bps N
\par               Stop transmission if BPS-Rate (Bytes Per Second) falls below N for a certain time (see --min-bps-time option).
\par        -M N, --min-bps-time
\par               Used together with --min-bps. Default is 120 (seconds).
\par        -O, --disable-timeouts
\par               Disable  read timeout handling code. This makes lrz hang if the sender does not send any more, but increases performance (a bit) and
\par               decreases system load (through reducing the number of system calls by about 50 percent).
\par 
\par               Use this option with care.
\par        --o-sync
\par               Open output files in synchronous write mode. This may be useful if you experience errors  due  to  lost  interrupts  if  update  (or
\par               bdflush or whoever this daemon is called on your system) writes the buffers to the disk.
\par 
\par               This option is ignored and a warning is printed if your systems doesn't support O_SYNC.
\par        -p, --protect
\par               (ZMODEM) Protect: skip file if destination file exists.
\par        -q, --quiet
\par               Quiet suppresses verbosity.
\par        -r, --resume
\par               Crash recovery mode. lrz tries to resume interrupted file transfers.
\par        -R, --restricted
\par               Enter more restricted mode. lrz will not create directories or files with a leading dot if this option is given twice.
\par 
\par               See SECURITY for mode information about restricted mode.
\par        -s HH:MM, --stop-at HH:MM
\par               Stop transmission at HH hours, MM minutes. Another variant, using +N instead of HH:MM, stops transmission in N seconds.
\par        -S, --timesync
\par               Request  timesync  packet from the sender. The sender sends its system time, causing lrz to complain about more then 60 seconds dif-
\par               ference.
\par 
\par               Lrz tries to set the local system time to the remote time if this option is given twice (this fails if lrz is not run by root).
\par 
\par               This option makes lrz incompatible with certain other ZModems. Don't use it unless you know what you are doing.
\par        --syslog[=off]
\par               turn syslogging on or off. the default is set at configure time.  This option is ignored if no syslog support is compiled in.
\par        -t TIM, --timeout TIM
\par               Change timeout to TIM tenths of seconds. This is ignored if timeout handling is turned of through the O option.
\par        --tcp-client ADDRESS:PORT
\par               Act as a tcp/ip client: Connect to the given port.
\par 
\par               See --tcp-server for more information.
\par 
\par        --tcp-server
\par               Act as a server: Open a socket, print out what to do, wait for connection.
\par 
\par               You will normally not want to use this option as lrzsz is the only zmodem which understands what  to  do  (private  extension).  You
\par               might  want  to  use  this  if  you  have to use zmodem (for which reason whatever), and cannot use the --tcp option of lsz (perhaps
\par               because your telnet doesn't allow to spawn a local program with stdin/stdout connected to the remote side).
\par 
\par               If you use this option you have to start lsz with the --tcp-client ADDRESS:PORT option.  lrz will print  the  address  and  port  on
\par               startup.
\par 
\par               Use of this option imposes a security risk, somebody else could connect to the port in between. See SECURITY for details.
\par        -U, --unrestrict
\par               turn off restricted mode (this is not possible if running under a restricted shell).
\par        --version
\par               prints out version number.
\par        -v, --verbose
\par               Verbose causes a list of file names to be appended to stderr.  More v's generate more output.
\par        -wN, --windowsize N
\par               Set window size to N.
\par        -X, --xmodem
\par               use XMODEM protocol.
\par \plain \f1\fs20\cf1        -y, --overwrite
\par               Yes, clobber any existing files with the same name.
\par \plain \f1\fs20        --ymodem
\par               use YMODEM protocol.
\par        -Z, --zmodem
\par               use ZMODEM protocol.
\par 
\par SECURITY
\par        Contrary to the original ZMODEM lrz defaults to restricted mode. In restricted mode lrz will not accept absolute pathnames or references to
\par        a parent directory, will not modify an existing file, and removes any files received in error. Remote command execution is disabled.
\par 
\par        To use a more restricted mode set the environment variable ZMODEM_RESTRICTED or give the R option. This disables creation of subdirectories
\par        and invisible files.
\par 
\par        Restricted mode may be turned off with the U option, unless lrz runs under a restricted shell.
\par 
\par        Use of the
\par               --tcp-client  or --tcp-server options imposes a security risk, as somebody else could connect to the port before you do it, and grab
\par               your data. If there's strong demand for a more secure mode i might introduce some sort of password challenge.
\par 
\par ENVIRONMENT
\par        lrz uses the following environment variables:
\par 
\par        SHELL  lrz recognizes a restricted shell if this variable includes rsh or rksh
\par 
\par        ZMODEM_RESTRICTED
\par               lrz enters the more restricted mode if the variable is set.
\par 
\par EXAMPLES
\par (Pro-YAM command)
\par <ALT-2>
\par Pro-YAM Command: sz *.h *.c
\par (This automatically invokes rz on the connected system.)
\par 
\par SEE ALSO
\par        ZMODEM.DOC, YMODEM.DOC, Professional-YAM, crc(omen), sz(omen), usq(omen), undos(omen)
\par 
\par        Compile time options required for various operating systems are described in the source file.
\par 
\par NOTES
\par        Sending serial data to timesharing minicomputers at sustained high speeds has been known to cause lockups, system halts, kernel panics, and
\par        occasional antisocial behaviour.  When experimenting with high speed input to a system, consider rebooting the system if the file transfers
\par        are not successful, especially if the personality of the system appears altered.
\par 
\par        The Unix "ulimit" parameter must be set high enough to permit large file transfers.
\par 
\par        The TTY input buffering on some systems may not allow long blocks or streaming input at high speed.  You should suspect this  problem  when
\par        you  can't  send  data to the Unix system at high speeds using ZMODEM, YMODEM-1k or XMODEM-1k, when YMODEM with 128 byte blocks works prop-
\par        erly.  If the system's tty line handling is really broken, the serial port or the entire system may  not  survive  the  onslaught  of  long
\par        bursts of high speed data.
\par 
\par        The DSZ or Pro-YAM zmodem l numeric parameter may be set to a value between 64 and 1024 to limit the burst length ("zmodem pl128").
\par 
\par        32 bit CRC code courtesy Gary S. Brown.  Directory creation code from John Gilmore's PD TAR program.
\par 
\par BUGS
\par        Calling rz from most versions of cu(1) doesn't work because cu's receive process fights rz for characters from the modem.
\par 
\par        Programs  that  do  not properly implement the specified file transfer protocol may cause sz to "hang" the port for a minute or two.  Every
\par        reported instance of this problem has been corrected by using ZCOMM, Pro-YAM, or other program with a correct implementation of the  speci-
\par        fied protocol.
\par 
\par        Many programs claiming to support YMODEM only support XMODEM with 1k blocks, and they often don't get that quite right.
\par 
\par        Pathnames  are  restricted  to  127  characters.   In XMODEM single file mode, the pathname given on the command line is still processed as
\par        described above.  The ASCII optionR/LF to NL translation merely deletes CRundos(omen) performs a more intelligent translation.
\par 
\par VMS VERSION
\par        The VMS version does not set the file time.
\par 
\par        VMS C Standard I/O and RMS may interact to modify file contents unexpectedly.
\par 
\par        The VMS version does not support invocation as rzCOMMAND .  The current VMS version does not support XMODEM, XMODEM-1k, or YMODEM.
\par 
\par        According to the VMS documentation, the buffered input routine used on the VMS version of rz introduces a delay of up  to  one  second  for
\par        each  protocol transaction.  This delay may be significant for very short files.  Removing the "#define BUFREAD" line from rz.c will elimi-
\par        nate this delay at the expense of increased CPU utilization.
\par 
\par        The VMS version causes DCL to generate a random off the wall error message under some error conditions; this is a result of the  incompati-
\par        bility of the VMS "exit" function with the Unix/MSDOS standard.
\par 
\par ZMODEM CAPABILITIES
\par        Rz supports incoming ZMODEM binary (-b), ASCII (-a), protect (-p), clobber (-y), and append (-+) requests.  The default is protect (-p) and
\par        binary (-b).
\par 
\par        The Unix versions support ZMODEM command execution.
\par 
\par FILES
\par        rz.c, crctab.c, rbsb.c, zm.c, zmodem.h Unix source files.
\par 
\par        rz.c, crctab.c, vrzsz.c, zm.c, zmodem.h, vmodem.h, vvmodem.c, VMS source files.\par}