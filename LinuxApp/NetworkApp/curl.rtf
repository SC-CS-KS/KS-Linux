{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red255\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid2072753386\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1918612630}
}
{\*\listoverridetable
{\listoverride\listid1918612630\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 curl
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs18 curl(1)                                                             Curl Manual                                                            curl(1)
\par 
\par NAME
\par \plain \f1\fs18\cf1        curl - transfer a URL
\par \plain \f1\fs18 
\par SYNOPSIS
\par        curl [options] [URL...]
\par 
\par DESCRIPTION
\par \plain \f1\fs18\cf1        curl  is  a  tool to transfer data from or to a server, using one of the supported protocols (HTTP, HTTPS, FTP, FTPS, GOPHER, DICT, TELNET,
\par        LDAP or FILE). \plain \f1\fs18 The command is\plain \f1\fs18\cf2  designed to work without user interaction.
\par \plain \f1\fs18 
\par        curl offers\plain \f1\fs18\cf2  a busload of useful tricks\plain \f1\fs18  like\plain \f1\fs18\cf2  proxy support\plain \f1\fs18 , \plain \f1\fs18\cf2 user authentication,\plain \f1\fs18  \plain \f1\fs18\cf2 ftp upload\plain \f1\fs18 ,\plain \f1\fs18\cf2  HTTP post\plain \f1\fs18 , \plain \f1\fs18\cf2 SSL (https:)  connections\plain \f1\fs18 ,  \plain \f1\fs18\cf2 cookies\plain \f1\fs18 ,
\par       \plain \f1\fs18\cf2  file transfer resume\plain \f1\fs18  and more. As you will see below, the amount of features will \plain \f1\fs18\cf2 make your head spin\plain \f1\fs18\cf1 (\uc2\u20351 \'ca\'b9\u20320 \'c4\'e3\u22836 \'cd\'b7\u26197 \'d4\'ce)\uc1\plain \f1\fs18 !
\par 
\par        curl is powered by libcurl for all transfer-related features. See libcurl(3) for details.
\par 
\par URL
\par        The URL syntax is protocol dependent. You'll find a detailed description in \plain \f1\fs18\cf1 RFC 2396\plain \f1\fs18 .
\par 
\par        You can specify multiple URLs or parts of URLs by writing part sets within braces as in:
\par 
\par    \plain \f1\fs18\cf1      http://site.\{one,two,three\}.com
\par 
\par \plain \f1\fs18        or you can get sequences of alphanumeric series by using [] as in:
\par 
\par \plain \f1\fs18\cf1         ftp://ftp.numericals.com/file[1-100].txt
\par \plain \f1\fs18         ftp://ftp.numericals.com/file[001-100].txt    (with leading zeros)
\par         ftp://ftp.letters.com/file[a-z].txt
\par 
\par        No \plain \f1\fs18\cf2 nesting\uc2\u65288 \'a3\'a8\u23884 \'c7\'b6\u22871 \'cc\'d7\u65289 \'a3\'a9\uc1\plain \f1\fs18  of the sequences is supported at the moment, but you can use several ones next to each other:
\par 
\par \plain \f1\fs18\cf1         http://any.org/archive[1996-1999]/vol[1-4]/part\{a,b,c\}.html
\par \plain \f1\fs18 
\par        You can specify any amount of URLs on the command line. They will be fetched in a sequential manner in the specified order.
\par 
\par        Curl  will  attempt to \plain \f1\fs18\cf1 re-use connections\plain \f1\fs18  for multiple file transfers, so that getting many files from the same server will not do multiple
\par        \plain \f1\fs18\cf2 connects / handshakes\plain \f1\fs18 . This improves speed. Of course this is only done on files specified on a single command  line  and  cannot  be  used
\par        between separate curl invokes.
\par 
\par OPTIONS
\par \plain \f1\fs18\cf1        -a/--append
\par \plain \f1\fs18               (FTP)  When  used  in an FTP upload, this will tell curl to append to the target file instead of overwriting it. If the file doesn't
\par               exist, it will be created.
\par 
\par               If this option is used twice, the second one will disable append mode again.
\par 
\par \plain \f1\fs18\cf1        -A/--user-agent <agent string>
\par \plain \f1\fs18               (HTTP) Specify the User-Agent string to send to the HTTP server. Some badly done CGIs fail if its  not  set  to  "Mozilla/4.0".   To
\par               encode  blanks  in  the  string,  surround  the string with single quote marks.  This can also be set with the -H/--header option of
\par               course.
\par 
\par               If this option is set more than once, the last one will be the one that's used.
\par 
\par        --anyauth
\par               (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote  site  claims  it  supports.
\par               This  is  done  by  first doing a request and checking the response-headers, thus inducing an extra network round-trip. This is used
\par               instead of setting a specific authentication method, which you can do with --basic, --digest, --ntlm,  and  --negotiate.  (Added  in
\par               7.10.6)
\par 
\par               If this option is used several times, the following occurrences make no difference.
\par 
\par        -b/--cookie <name=data>
\par               (HTTP)  Pass  the  data  to  the  HTTP  server as a cookie. It is supposedly the data previously received from the server in a "Set-
\par               Cookie:" line.  The data should be in the format "NAME1=VALUE1; NAME2=VALUE2".
\par 
\par               If no '=' letter is used in the line, it is treated as a filename to use to read previously stored cookie lines from,  which  should
\par               be  used  in  this  session if they match. Using this method also activates the "cookie parser" which will make curl record incoming
\par               cookies too, which may be handy if you're using this in combination with the -L/--location option. The file format of  the  file  to
\par               read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format.
\par 
\par               NOTE  that  the  file specified with -b/--cookie is only used as input. No cookies will be stored in the file. To store cookies, use
\par               the -c/--cookie-jar option or you could even save the HTTP headers to a file using -D/--dump-header!
\par 
\par               If this option is set more than once, the last one will be the one that's used.
\par 
\par        -B/--use-ascii
\par               Use ASCII transfer when getting an FTP file or LDAP info. For FTP, this can also  be  enforced  by  using  an  URL  that  ends  with
\par               ";type=A". This option causes data sent to stdout to be in text mode for win32 systems.
\par 
\par               If this option is used twice, the second one will disable ASCII usage.
\par 
\par        --basic
\par               (HTTP)  Tells  curl to use HTTP Basic authentication. This is the default and this option is usually pointless, unless you use it to
\par               override a previously set option that sets a different authentication method (such as --ntlm, --digest and --negotiate).  (Added  in
\par               7.10.6)
\par 
\par               If this option is used several times, the following occurrences make no difference.
\par 
\par        --ciphers <list of ciphers>
\par               (SSL)  Specifies which ciphers to use in the connection. The list of ciphers must be using valid ciphers. Read up on SSL cipher list
\par               details on this URL: http://www.openssl.org/docs/apps/ciphers.html
\par 
\par               If this option is used several times, the last one will override the others.
\par 
\par        --compressed
\par               (HTTP) Request a compressed response using one of the algorithms libcurl supports, and return the uncompressed  document.   If  this
\par               option is used and the server sends an unsupported encoding, Curl will report an error.
\par 
\par               If this option is used several times, each occurrence will toggle it on/off.
\par 
\par        --connect-timeout <seconds>
\par               Maximum  time  in seconds that you allow the connection to the server to take.  This only limits the connection phase, once curl has
\par               connected this option is of no more use. See also the -m/--max-time option.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -c/--cookie-jar <file name>
\par               Specify to which file you want curl to write all cookies after a completed operation. Curl writes all cookies previously read from a
\par               specified  file  as  well  as all cookies received from remote server(s). If no cookies are known, no file will be written. The file
\par               will be written using the Netscape cookie file format. If you set the file name to a single dash, "-", the cookies will  be  written
\par               to stdout.
\par 
\par               NOTE If the cookie jar can't be created or written to, the whole curl operation won't fail or even report an error clearly. Using -v
\par               will get a warning displayed, but that is the only visible feedback you get about this possibly lethal situation.
\par 
\par               If this option is used several times, the last specfied file name will be used.
\par 
\par        -C/--continue-at <offset>
\par               Continue/Resume a previous file transfer at the given offset. The given offset is the exact number of bytes  that  will  be  skipped
\par               counted from the beginning of the source file before it is transfered to the destination.  If used with uploads, the ftp server com-
\par               mand SIZE will not be used by curl.
\par 
\par               Use "-C -" to tell curl to automatically find out where/how to resume the transfer. It then uses the  given  output/input  files  to
\par               figure that out.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --create-dirs
\par               When used in conjunction with the -o option, curl will create the necessary local directory hierarchy as needed. This option creates
\par               the dirs mentioned with the -o option, nothing else. If the -o file name uses no dir or if the dirs it mentions  already  exist,  no
\par               dir will be created.
\par 
\par               To create remote directories when using FTP, try --ftp-create-dirs.
\par 
\par        --crlf (FTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
\par 
\par               If this option is used twice, the second will again disable crlf converting.
\par 
\par        -d/--data <data>
\par               (HTTP)  Sends  the  specified data in a POST request to the HTTP server, in a way that can emulate as if a user has filled in a HTML
\par               form and pressed the submit button. Note that the data is sent exactly as specified with no extra processing (with all newlines  cut
\par               off).  The data is expected to be "url-encoded". This will cause curl to pass the data to the server using the content-type applica-
\par               tion/x-www-form-urlencoded. Compare to -F/--form. If this option is used more than once on the same command line,  the  data  pieces
\par               specified  will  be  merged  together  with a separating &-letter. Thus, using '-d name=daniel -d skill=lousy' would generate a post
\par               chunk that looks like 'name=daniel&skill=lousy'.
\par 
\par               If you start the data with the letter @, the rest should be a file name to read the data from, or - if you want  curl  to  read  the
\par               data  from  stdin.   The contents of the file must already be url-encoded. Multiple files can also be specified. Posting data from a
\par               file named 'foobar' would thus be done with --data @foobar".
\par 
\par               To post data purely binary, you should instead use the --data-binary option.
\par 
\par               -d/--data is the same as --data-ascii.
\par 
\par               If this option is used several times, the ones following the first will append data.
\par 
\par        --data-ascii <data>
\par               (HTTP) This is an alias for the -d/--data option.
\par 
\par               If this option is used several times, the ones following the first will append data.
\par 
\par        --data-binary <data>
\par               (HTTP) This posts data in a similar manner as --data-ascii does, although when using this option the entire context  of  the  posted
\par               data  is  kept  as-is.  If you want to post a binary file without the strip-newlines feature of the --data-ascii option, this is for
\par               you.
\par 
\par               If this option is used several times, the ones following the first will append data.
\par 
\par        --digest
\par               (HTTP) Enables HTTP Digest authentication. This is a authentication that prevents the password from being  sent  over  the  wire  in
\par               clear text. Use this in combination with the normal -u/--user option to set user name and password. See also --ntlm, --negotiate and
\par               --anyauth for related options. (Added in curl 7.10.6)
\par 
\par               If this option is used several times, the following occurrences make no difference.
\par 
\par        --disable-eprt
\par               (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers. Curl will  normally  always  first
\par               attempt to use EPRT, then LPRT before using PORT, but with this option, it will use PORT right away. EPRT and LPRT are extensions to
\par               the original FTP protocol, may not work on all servers but enable more functionality in a better way than the traditional PORT  com-
\par               mand. (Aded in 7.10.5)
\par 
\par               If this option is used several times, each occurrence will toggle this on/off.
\par 
\par        --disable-epsv
\par               (FTP)  Tell curl to disable the use of the EPSV command when doing passive FTP transfers. Curl will normally always first attempt to
\par               use EPSV before PASV, but with this option, it will not try using EPSV.
\par 
\par               If this option is used several times, each occurrence will toggle this on/off.
\par 
\par        -D/--dump-header <file>
\par               Write the protocol headers to the specified file.
\par 
\par               This option is handy to use when you want to store the headers that a HTTP site sends to you. Cookies from the headers could then be
\par               read in a second curl invoke by using the -b/--cookie option! The -c/--cookie-jar option is however a better way to store cookies.
\par 
\par               When used on FTP, the ftp server response lines are considered being "headers" and thus are saved there.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -e/--referer <URL>
\par               (HTTP) Sends the "Referer Page" information to the HTTP server. This can also be set with the -H/--header flag of course.  When used
\par               with -L/--location you can append ";auto" to the referer URL to make curl automatically set the previous URL when it follows a Loca-
\par               tion: header. The ";auto" string can be used alone, even if you don't set an initial referer.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --environment
\par               (RISC  OS  ONLY) Sets a range of environment variables, using the names the -w option supports, to easier allow extraction of useful
\par               information after having run curl.
\par 
\par               If this option is used several times, each occurrence will toggle this on/off.
\par 
\par        --egd-file <file>
\par               (HTTPS) Specify the path name to the Entropy Gathering Daemon socket. The socket is used to seed the random engine for  SSL  connec-
\par               tions. See also the --random-file option.
\par 
\par        -E/--cert <certificate[:password]>
\par               (HTTPS)  Tells curl to use the specified certificate file when getting a file with HTTPS. The certificate must be in PEM format.  If
\par               the optional password isn't specified, it will be queried for on the terminal. Note that this certificate is the private key and the
\par               private certificate concatenated!
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --cert-type <type>
\par               (SSL) Tells curl what certificate type the provided certificate is in. PEM, DER and ENG are recognized types.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --cacert <CA certificate>
\par               (HTTPS) Tells curl to use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The cer-
\par               tificate(s) must be in PEM format.
\par 
\par               curl recognizes the environment variable named 'CURL_CA_BUNDLE' if that is set, and uses the given path as a path to a CA cert  bun-
\par               dle. This option overrides that variable.
\par 
\par               The  windows version of curl will automatically look for a CA certs file named \uc2\u30911 \'b4curl-ca-bundle.crt either in the same directory as\uc1
\par               curl.exe, or in the Current Working Directory, or in any folder along your PATH.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --capath <CA certificate directory>
\par               (HTTPS) Tells curl to use the specified certificate directory to verify the peer. The certificates must be in PEM  format,  and  the
\par               directory  must  have  been  processed using the c_rehash utility supplied with openssl. Using --capath can allow curl to make https
\par               connections much more efficiently than using --cacert if the --cacert file contains many CA certificates.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -f/--fail
\par               (HTTP) Fail silently (no output at all) on server errors. This is mostly done like this to better enable scripts etc to better  deal
\par               with  failed  attempts. In normal cases when a HTTP server fails to deliver a document, it returns a HTML document stating so (which
\par               often also describes why and more). This flag will prevent curl from outputting that and fail silently instead.
\par 
\par               If this option is used twice, the second will again disable silent failure.
\par 
\par        --ftp-create-dirs
\par               (FTP) When an FTP URL/operation uses a path that doesn't currently exist on the server, the standard behavior of curl  is  to  fail.
\par               Using this option, curl will instead attempt to create missing directories. (Added in 7.10.7)
\par 
\par               If this option is used twice, the second will again disable silent failure.
\par 
\par        --ftp-pasv
\par               (FTP)  Use  PASV  when  transfering.  PASV is the internal default behavior, but using this option can be used to override a previos
\par               --ftp-port option. (Added in 7.11.0)
\par 
\par               If this option is used twice, the second will again disable silent failure.
\par 
\par        --ftp-ssl
\par               (FTP) Make the FTP connection switch to use SSL/TLS. (Added in 7.11.0)
\par 
\par               If this option is used twice, the second will again disable silent failure.
\par 
\par        -F/--form <name=content>
\par               (HTTP) This lets curl emulate a filled in form in which a user has pressed the submit button. This causes curl to  POST  data  using
\par               the  content-type  multipart/form-data according to RFC1867. This enables uploading of binary files etc. To force the 'content' part
\par               to be be a file, prefix the file name with an @ sign. To just get the content part from a file, prefix the file name with the letter
\par               <.  The  difference  between @ and < is then that @ makes a file get attached in the post as a file upload, while the < makes a text
\par               field and just get the contents for that text field from a file.
\par 
\par               Example, to send your password file to the server, where 'password' is the name of the form-field to which /etc/passwd will  be  the
\par               input:
\par 
\par               curl -F password=@/etc/passwd www.mypasswords.com
\par 
\par               To  read  the  file's content from stdin insted of a file, use - where the file name should've been. This goes for both @ and < con-
\par               structs.
\par 
\par               You can also tell curl what Content-Type to use for the file upload part, by using 'type=', in a manner similar to:
\par 
\par               curl -F "web=@index.html;type=text/html" url.com
\par 
\par               See further examples and details in the MANUAL.
\par 
\par               This option can be used multiple times.
\par 
\par        -g/--globoff
\par               This option switches off the "URL globbing parser". When you set this option, you can specify URLs that  contain  the  letters  \{\}[]
\par               without  having  them being interpreted by curl itself. Note that these letters are not normal legal URL contents but they should be
\par               encoded according to the URI standard.
\par 
\par        -G/--get
\par               When used, this option will make all data specified with -d/--data or --data-binary to be used in a HTTP GET request instead of  the
\par               POST request that otherwise would be used. The data will be appended to the URL with a '?'  separator.
\par 
\par               If used in combination with -I, the POST data will instead be appended to the URL with a HEAD request.
\par 
\par               If used multiple times, nothing special happens.
\par 
\par        -h/--help
\par               Usage help.
\par 
\par        -H/--header <header>
\par               (HTTP)  Extra header to use when getting a web page. You may specify any number of extra headers. Note that if you should add a cus-
\par               tom header that has the same name as one of the internal ones curl would use, your externally set header will be used instead of the
\par               internal one. This allows you to make even trickier stuff than curl would normally do. You should not replace internally set headers
\par               without knowing perfectly well what you're doing. Replacing an internal header with one without content on the  right  side  of  the
\par               colon will prevent that header from appearing.
\par 
\par               See also the -A/--user-agent and -e/--referer options.
\par 
\par               This option can be used multiple times to add/replace/remove multiple headers.
\par 
\par        -i/--include
\par               (HTTP)  Include  the HTTP-header in the output. The HTTP-header includes things like server-name, date of the document, HTTP-version
\par               and more...
\par 
\par               If this option is used twice, the second will again disable header include.
\par 
\par        --interface <name>
\par               Perform an operation using a specified interface. You can enter interface name, IP address or host name. An example could look like:
\par 
\par                curl --interface eth0:1 http://www.netscape.com/
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -I/--head
\par               (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature the command HEAD which this uses to get nothing but the header of a
\par               document. When used on a FTP or FILE file, curl displays the file size and last modification time only.
\par 
\par               If this option is used twice, the second will again disable header only.
\par 
\par        -j/--junk-session-cookies
\par               (HTTP) When curl is told to read cookies from a given file, this option will make  it  discard  all  "session  cookies".  This  will
\par               basicly  have  the  same  effect as if a new session is started. Typical browsers always discard session cookies when they're closed
\par               down. (Added in 7.9.7)
\par 
\par               If this option is used several times, each occurrence will toggle this on/off.
\par 
\par        -k/--insecure
\par               (SSL) This option explicitly allows curl to perform "insecure" SSL connections and transfers. Starting with curl 7.10, all SSL  con-
\par               nections  will  be  attempted  to be made secure by using the CA certificate bundle installed by default. This makes all connections
\par               considered "insecure" to fail unless -k/--insecure is used.
\par 
\par               If this option is used twice, the second time will again disable it.
\par 
\par        --key <key>
\par               (SSL) Private key file name. Allows you to provide your private key in this separate file.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --key-type <type>
\par               (SSL) Private key file type. Specify which type your --key provided private key is. DER, PEM and ENG are supported.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --krb4 <level>
\par               (FTP) Enable kerberos4 authentication and use. The level must be entered and should be one of  'clear',  'safe',  'confidential'  or
\par               'private'. Should you use a level that is not one of these, 'private' will instead be used.
\par 
\par               This  option  requiures  that the library was built with kerberos4 support. This is not very common. Use -V/--version to see if your
\par               curl supports it.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -K/--config <config file>
\par               Specify which config file to read curl arguments from. The config file is a text file in which command line arguments can be written
\par               which  then  will  be used as if they were written on the actual command line. Options and their parameters must be specified on the
\par               same config file line. If the parameter is to contain white spaces, the parameter must be inclosed within quotes.  If the first col-
\par               umn of a config line is a '#' character, the rest of the line will be treated as a comment.
\par 
\par               Specify the filename as '-' to make curl read the file from stdin.
\par 
\par               Note  that  to be able to specify a URL in the config file, you need to specify it using the --url option, and not by simply writing
\par               the URL on its own line. So, it could look similar to this:
\par 
\par               url = "http://curl.haxx.se/docs/"
\par 
\par               This option can be used multiple times.
\par 
\par        --limit-rate <speed>
\par               Specify the maximum transfer rate you want curl to use. This feature is useful if you have a limited pipe and you'd like your trans-
\par               fer not use your entire bandwidth.
\par 
\par               The  given speed is measured in bytes/second, unless a suffix is appended.  Appending 'k' or 'K' will count the number as kilobytes,
\par               'm' or M' makes it megabytes while 'g' or 'G' makes it gigabytes. Examples: 200K, 3m and 1G.
\par 
\par               If you are also using the -Y/--speed-limit option, that option will take precedence and might cripple the rate-limiting slightly, to
\par               help keeping the speed-limit logic working.
\par 
\par               This option was introduced in curl 7.10.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -l/--list-only
\par               (FTP)  When  listing an FTP directory, this switch forces a name-only view.  Especially useful if you want to machine-parse the con-
\par               tents of an FTP directory since the normal directory view doesn't use a standard look or format.
\par 
\par               This option causes an FTP NLST command to be sent.  Some FTP servers list only files in their response to NLST; they do not  include
\par               subdirectories and symbolic links.
\par 
\par               If this option is used twice, the second will again disable list only.
\par 
\par        -L/--location
\par               (HTTP/HTTPS)  If the server reports that the requested page has a different location (indicated with the header line Location:) this
\par               flag will let curl attempt to reattempt the get on the new place. If used together with -i/--include or -I/--head, headers from  all
\par               requested  pages will be shown. If authentication is used, curl will only send its credentials to the initial host, so if a redirect
\par               takes curl to a different host, it won't intercept the user+password. See also --location-trusted on how to change this.
\par 
\par               If this option is used twice, the second will again disable location following.
\par 
\par        --location-trusted
\par               (HTTP/HTTPS) Like -L/--location, but will allow sending the name + password to all hosts that the site may redirect to. This may  or
\par               may  not  introduce  a  security  breach if the site redirects you do a site to which you'll send your authentication info (which is
\par               plaintext in the case of HTTP Basic authentication).
\par 
\par               If this option is used twice, the second will again disable location following.
\par 
\par        --max-filesize <bytes>
\par               Specify the maximum size (in bytes) of a file to download. If the file requested is larger than this value, the  transfer  will  not
\par               start and curl will return with exit code 63.
\par 
\par               NOTE:  The  file  size is not always known prior to download, and for such files this option has no effect even if the file transfer
\par               ends up being larger than this given limit. This concerns both FTP and HTTP transfers.
\par 
\par        -m/--max-time <seconds>
\par               Maximum time in seconds that you allow the whole operation to take.  This is useful for preventing your batch jobs from hanging  for
\par               hours due to slow networks or links going down.  This doesn't work fully in win32 systems.  See also the --connect-timeout option.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -M/--manual
\par               Manual. Display the huge help text.
\par 
\par        -n/--netrc
\par               Makes curl scan the .netrc file in the user's home directory for login name and password. This is typically used for ftp on unix. If
\par               used with http, curl will enable user authentication. See netrc(4) or ftp(1) for details on the file format. Curl will not  complain
\par               if  that  file  hasn't the right permissions (it should not be world nor group readable). The environment variable "HOME" is used to
\par               find the home directory.
\par 
\par               A quick and very simple example of how to setup a .netrc to allow curl to ftp to the machine host.domain.com with user name 'myself'
\par               and password
\par 
\par               machine host.domain.com login myself password secret
\par 
\par               If this option is used twice, the second will again disable netrc usage.
\par 
\par        --netrc-optional
\par               Very similar to --netrc, but this option makes the .netrc usage optional and not mandatory as the --netrc does.
\par 
\par        --negotiate
\par               (HTTP)  Enables  GSS-Negotiate  authentication.  The GSS-Negotiate method was designed by Microsoft and is used in their web aplica-
\par               tions. It is primarily meant as a support for Kerberos5 authentication but may be also used along with another authentication  meth-
\par               ods. For more information see IETF draft draft-brezak-spnego-http-04.txt. (Added in 7.10.6)
\par 
\par               This  option requiures that the library was built with GSSAPI support. This is not very common. Use -V/--version to see if your ver-
\par               sion supports GSS-Negotiate.
\par 
\par               If this option is used several times, the following occurrences make no difference.
\par 
\par        -N/--no-buffer
\par               Disables the buffering of the output stream. In normal work situations, curl will use a standard buffered output  stream  that  will
\par               have  the effect that it will output the data in chunks, not necessarily exactly when the data arrives.  Using this option will dis-
\par               able that buffering.
\par 
\par               If this option is used twice, the second will again switch on buffering.
\par 
\par        --ntlm (HTTP) Enables NTLM authentication. The NTLM authentication method was designed by Microsoft and is used by IIS web servers. It is a
\par               proprietary  protocol,  reversed  engineered  by clever people and implemented in curl based on their efforts. This kind of behavior
\par               should not be endorsed, you should encourage everyone who uses NTLM to switch to  a  public  and  documented  authentication  method
\par               instead. Such as Digest. (Added in 7.10.6)
\par 
\par               If you want to enable NTLM for your proxy authentication, then use --proxy-ntlm.
\par 
\par               This option requiures that the library was built with SSL support. Use -V/--version to see if your curl supports NTLM.
\par 
\par               If this option is used several times, the following occurrences make no difference.
\par 
\par        -o/--output <file>
\par               Write  output to <file> instead of stdout. If you are using \{\} or [] to fetch multiple documents, you can use '#' followed by a num-
\par               ber in the <file> specifier. That variable will be replaced with the current string for the URL being fetched. Like in:
\par 
\par                 curl http://\{one,two\}.site.com -o "file_#1.txt"
\par 
\par               or use several variables like:
\par 
\par                 curl http://\{site,host\}.host[1-5].com -o "#1_#2"
\par 
\par               You may use this option as many times as you have number of URLs.
\par 
\par               See also the --create-dirs option to create the local directories dynamically.
\par 
\par \plain \f1\fs18\cf1        -O/--remote-name
\par \plain \f1\fs18             \plain \f1\fs18\cf1   Write output to a local file named like the remote file we get. \plain \f1\fs18 (Only the file part of the remote file is  used,  the  path  is  cut
\par               off.)
\par 
\par               You may use this option as many times as you have number of URLs.
\par 
\par        --pass <phrase>
\par               (SSL) Pass phrase for the private key
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --proxy-basic
\par               Tells  curl  to  use  HTTP  Basic authentication when communicating with the given proxy. Use --basic for enabling HTTP Basic with a
\par               remote host. Basic is the default authentication method curl uses with proxies.
\par 
\par               If this option is used twice, the second will again disable proxy HTTP Basic authentication.
\par 
\par        --proxy-digest
\par               Tells curl to use HTTP Digest authentication when communicating with the given proxy. Use --digest for enabling HTTP Digest  with  a
\par               remote host.
\par 
\par               If this option is used twice, the second will again disable proxy HTTP Digest.
\par 
\par        --proxy-ntlm
\par               Tells curl to use HTTP NTLM authentication when communicating with the given proxy. Use --ntlm for enabling NTLM with a remote host.
\par 
\par               If this option is used twice, the second will again disable proxy HTTP NTLM.
\par 
\par        -p/--proxytunnel
\par               When an HTTP proxy is used (-x/--proxy), this option will cause non-HTTP protocols to attempt to tunnel through the proxy instead of
\par               merely  using  it  to do HTTP-like operations. The tunnel approach is made with the HTTP proxy CONNECT request and requires that the
\par               proxy allows direct connect to the remote port number curl wants to tunnel through to.
\par 
\par               If this option is used twice, the second will again disable proxy tunnel.
\par 
\par        -P/--ftp-port <address>
\par               (FTP) Reverses the initiator/listener roles when connecting with ftp. This switch makes Curl use the PORT command instead  of  PASV.
\par               In  practice,  PORT  tells  the  server  to connect to the client's specified address and port, while PASV asks the server for an ip
\par               address and port to connect to. <address> should be one of:
\par 
\par               interface
\par                      i.e "eth0" to specify which interface's IP address you want to use  (Unix only)
\par 
\par               IP address
\par                      i.e "192.168.10.1" to specify exact IP number
\par 
\par               host name
\par                      i.e "my.host.domain" to specify machine
\par 
\par               -      (any single-letter string) to make it pick the machine's default
\par 
\par        If this option is used several times, the last one will be used. Disable the use of PORT with --ftp-pasv. Disable the attempt  to  use  the
\par        EPRT command instead of PORT by using --disable-eprt. EPRT is really PORT++.
\par 
\par        -q     If used as the first parameter on the command line, the $HOME/.curlrc file will not be read and used as a config file.
\par 
\par        -Q/--quote <comand>
\par               (FTP)  Send an arbitrary command to the remote FTP server. Quote commands are sent BEFORE the transfer is taking place. To make com-
\par               mands take place after a successful transfer, prefix them with a dash '-'. You may specify any amount of commands to be  run  before
\par               and  after  the transfer. If the server returns failure for one of the commands, the entire operation will be aborted. You must send
\par               syntactically correct FTP commands as RFC959 defines.
\par 
\par               This option can be used multiple times.
\par 
\par        --random-file <file>
\par               (HTTPS) Specify the path name to file containing what will be considered as random data. The data is used to seed the random  engine
\par               for SSL connections.  See also the --egd-file option.
\par 
\par        -r/--range <range>
\par               (HTTP/FTP)  Retrieve  a  byte  range  (i.e a partial document) from a HTTP/1.1 or FTP server. Ranges can be specified in a number of
\par               ways.
\par 
\par               0-499     specifies the first 500 bytes
\par 
\par               500-999   specifies the second 500 bytes
\par 
\par               -500      specifies the last 500 bytes
\par 
\par               9500      specifies the bytes from offset 9500 and forward
\par 
\par               0-0,-1    specifies the first and last byte only(*)(H)
\par 
\par               500-700,600-799
\par                         specifies 300 bytes from offset 500(H)
\par 
\par               100-199,500-599
\par                         specifies two separate 100 bytes ranges(*)(H)
\par 
\par        (*) = NOTE that this will cause the server to reply with a multipart response!
\par 
\par        You should also be aware that many HTTP/1.1 servers do not have this feature enabled, so that when you  attempt  to  get  a  range,  you'll
\par        instead get the whole document.
\par 
\par        FTP  range  downloads  only  support the simple syntax 'start-stop' (optionally with one of the numbers omitted). It depends on the non-RFC
\par        command SIZE.
\par 
\par        If this option is used several times, the last one will be used.
\par 
\par        -R/--remote-time
\par               When used, this will make libcurl attempt to figure out the timestamp of the remote file, and if that is available  make  the  local
\par               file get that same timestamp.
\par 
\par               If this option is used twice, the second time disables this again.
\par 
\par   \plain \f1\fs18\cf1      -s/--silent
\par \plain \f1\fs18               Silent mode. Don't show progress meter or error messages.  Makes Curl \plain \f1\fs18\cf1 mute\uc2\u65288 \'a3\'a8\u21713 \'d1\'c6\u30340 \'b5\'c4\u65307 \'a3\'bb\u27785 \'b3\'c1\u40664 \'c4\'ac\u30340 \'b5\'c4\u65307 \'a3\'bb\u26080 \'ce\'de\u22768 \'c9\'f9\u30340 \'b5\'c4\u65289 \'a3\'a9.\uc1
\par \plain \f1\fs18 
\par              \plain \f1\fs18\cf1  If this option is used twice, the second will again disable mute.
\par \plain \f1\fs18 
\par        -S/--show-error
\par               When used with -s it makes curl show error message if it fails.
\par 
\par               If this option is used twice, the second will again disable show error.
\par 
\par        --socks <host[:port]>
\par               Use the specified SOCKS5 proxy. If the port number is not specified, it is assumed at port 1080. (Option added in 7.11.1)
\par 
\par               This option overrides any previous use of -x/--proxy, as they are mutually exclusive.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --stderr <file>
\par               Redirect  all writes to stderr to the specified file instead. If the file name is a plain '-', it is instead written to stdout. This
\par               option has no point when you're using a shell with decent redirecting capabilities.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --tcp-nodelay
\par               Turn on the TCP_NODELAY option. See the curl_easy_setopt(3) man page for details about this option. (Added in 7.11.2)
\par 
\par               If this option is used several times, each occurance toggles this on/off.
\par 
\par        -t/--telnet-option <OPT=val>
\par               Pass options to the telnet protocol. Supported options are:
\par 
\par               TTYPE=<term> Sets the terminal type.
\par 
\par               XDISPLOC=<X display> Sets the X display location.
\par 
\par               NEW_ENV=<var,val> Sets an environment variable.
\par 
\par        -T/--upload-file <file>
\par               This transfers the specified local file to the remote URL. If there is no file part in the specified URL, Curl will append the local
\par               file name. NOTE that you must use a trailing / on the last directory to really prove to Curl that there is no file name or curl will
\par               think that your last directory name is the remote file name to use. That will most likely cause the upload  operation  to  fail.  If
\par               this is used on a http(s) server, the PUT command will be used.
\par 
\par               Use the file name "-" (a single dash) to use stdin instead of a given file.
\par 
\par               Before 7.10.8, when this option was used several times, the last one was used.
\par 
\par               In  curl  7.10.8 and later, you can specify one -T for each URL on the command line. Each -T + URL pair specifies what to upload and
\par               to where. curl also supports "globbing" of the -T argument, meaning that you can upload multiple files to a single URL by using  the
\par               same URL globbing style supported in the URL, like this:
\par 
\par               curl -T "\{file1,file2\}" http://www.uploadtothissite.com
\par 
\par               or even
\par 
\par               curl -T "img[1-1000].png" ftp://ftp.picturemania.com/upload/
\par 
\par        --trace <file>
\par               Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use "-" as
\par               filename to have the output sent to stdout.
\par 
\par               If this option is used several times, the last one will be used. (Added in 7.9.7)
\par 
\par        --trace-ascii <file>
\par               Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use "-" as
\par               filename to have the output sent to stdout.
\par 
\par               This is very similar to --trace, but leaves out the hex part and only shows the ASCII part of the dump. It makes smaller output that
\par               might be easier to read for untrained humans.
\par 
\par               If this option is used several times, the last one will be used. (Added in 7.9.7)
\par 
\par        -u/--user <user:password>
\par               Specify user and password to use for server authentication.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -U/--proxy-user <user:password>
\par               Specify user and password to use for proxy authentication.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        --url <URL>
\par               Specify a URL to fetch. This option is mostly handy when you want to specify URL(s) in a config file.
\par 
\par               This option may be used any number of times. To control where this URL is written,  use  the  -o/--output  or  the  -O/--remote-name
\par               options.
\par 
\par        -v/--verbose
\par               Makes  the  fetching more verbose/talkative. Mostly usable for debugging. Lines starting with '>' means data sent by curl, '<' means
\par               data received by curl that is hidden in normal cases and lines starting with '*' means additional info provided by curl.
\par 
\par               Note that if you want to see HTTP headers in the output, -i/--include might be option you're looking for.
\par 
\par               If you think this option still doesn't give you enough details, consider using --trace or --trace-ascii instead.
\par 
\par               If this option is used twice, the second will again disable verbose.
\par 
\par        -V/--version
\par               Displays information about curl and the libcurl version it uses.
\par 
\par               The first line includes the full version of curl, libcurl and other 3rd party libraries linked with the executable.
\par 
\par               The second line (starts with "Protocols:") shows all protocols that libcurl reports to support.
\par 
\par               The third line (starts with "Features:") shows specific features libcurl reports to offer. Available features include:
\par 
\par               IPv6   You can use IPv6 with this.
\par 
\par               krb4   Krb4 for ftp is supported.
\par 
\par               SSL    HTTPS and FTPS are supported.
\par 
\par               libz   Automatic decompression of compressed files over HTTP is supported.
\par 
\par               NTLM   NTLM authenticaion is supported.
\par 
\par               GSS-Negotiate
\par                      Negotiate authenticaion is supported.
\par 
\par               Debug  This curl uses a libcurl built with Debug. This enables more error-tracking and memory  debugging  etc.  For  curl-developers
\par                      only!
\par 
\par               AsynchDNS
\par                      This curl uses asynchronous name resolves.
\par 
\par               SPNEGO SPNEGO Negotiate authenticaion is supported.
\par 
\par               Largefile
\par                      This curl supports transfers of large files, files larger than 2GB.
\par 
\par               IDN    This curl supports IDN - international domain names.
\par 
\par        -w/--write-out <format>
\par               Defines  what  to  display after a completed and successful operation. The format is a string that may contain plain text mixed with
\par               any number of variables. The string can be specified as "string", to get read from a particular file you specify it "@filename"  and
\par               to tell curl to read the format from stdin you write "@-".
\par 
\par               The  variables  present  in the output format will be substituted by the value or text that curl thinks fit, as described below. All
\par               variables are specified like %\{variable_name\} and to output a normal % you just write them like %%. You  can  output  a  newline  by
\par               using \\n, a carriage return with \\r and a tab space with \\t.
\par 
\par               NOTE:  The %-letter is a special letter in the win32-environment, where all occurrences of % must be doubled when using this option.
\par 
\par               Available variables are at this point:
\par 
\par               url_effective  The URL that was fetched last. This is mostly meaningful if you've told curl to follow location: headers.
\par 
\par               http_code      The numerical code that was found in the last retrieved HTTP(S) page.
\par 
\par               time_total     The total time, in seconds, that the full operation lasted. The time will be displayed with millisecond resolution.
\par 
\par               time_namelookup
\par                              The time, in seconds, it took from the start until the name resolving was completed.
\par 
\par               time_connect   The time, in seconds, it took from the start until the connect to the remote host (or proxy) was completed.
\par 
\par               time_pretransfer
\par                              The time, in seconds, it took from the start until the file transfer is just about to begin. This includes  all  pre-
\par                              transfer commands and negotiations that are specific to the particular protocol(s) involved.
\par 
\par               time_starttransfer
\par                              The  time,  in  seconds,  it  took  from the start until the first byte is just about to be transfered. This includes
\par                              time_pretransfer and also the time the server needs to calculate the result.
\par 
\par               size_download  The total amount of bytes that were downloaded.
\par 
\par               size_upload    The total amount of bytes that were uploaded.
\par 
\par               size_header    The total amount of bytes of the downloaded headers.
\par 
\par               size_request   The total amount of bytes that were sent in the HTTP request.
\par 
\par               speed_download The average download speed that curl measured for the complete download.
\par 
\par               speed_upload   The average upload speed that curl measured for the complete upload.
\par 
\par               content_type   The Content-Type of the requested document, if there was any. (Added in 7.9.5)
\par 
\par        If this option is used several times, the last one will be used.
\par 
\par        -x/--proxy <proxyhost[:port]>
\par               Use specified HTTP proxy. If the port number is not specified, it is assumed at port 1080.
\par 
\par               This option overrides existing environment variables that sets proxy to use. If there's an environment variable setting a proxy, you
\par               can set proxy to "" to override it.
\par 
\par               Note  that all operations that are performed over a HTTP proxy will transparantly be converted to HTTP. It means that certain proto-
\par               col specific operations might not be available. This is not the case if  you  can  tunnel  through  the  proxy,  as  done  with  the
\par               -p/--proxytunnel option.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -X/--request <command>
\par               (HTTP) Specifies a custom request to use when communicating with the HTTP server.  The specified request will be used instead of the
\par               standard GET. Read the HTTP 1.1 specification for details and explanations.
\par 
\par               (FTP) Specifies a custom FTP command to use instead of LIST when doing file lists with ftp.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -y/--speed-time <time>
\par               If a download is slower than speed-limit bytes per second during a speed-time period, the download gets aborted.  If  speed-time  is
\par               used, the default speed-limit will be 1 unless set with -y.
\par 
\par               This  option  controls transfers and thus will not affect slow connects etc. If this is a concern for you, try the --connect-timeout
\par               option.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -Y/--speed-limit <speed>
\par               If a download is slower than this given speed, in bytes per second, for speed-time seconds it gets aborted. speed-time is  set  with
\par               -Y and is 30 if not set.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -z/--time-cond <date expression>
\par               (HTTP)  Request  to  get a file that has been modified later than the given time and date, or one that has been modified before that
\par               time. The date expression can be all sorts of date strings or if it doesn't match any internal ones, it tries to get the time from a
\par               given file name instead! See the GNU date(1) or curl_getdate(3) man pages for date expression details.
\par 
\par               Start  the  date  expression  with a dash (-) to make it request for a document that is older than the given date/time, default is a
\par               document that is newer than the specified date/time.
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -Z/--max-redirs <num>
\par               Set maximum number of redirection-followings allowed. If -L/--location is used, this option can be used to prevent curl from follow-
\par               ing redirections "in absurdum".
\par 
\par               If this option is used several times, the last one will be used.
\par 
\par        -0/--http1.0
\par               (HTTP) Forces curl to issue its requests using HTTP 1.0 instead of using its internally preferred: HTTP 1.1.
\par 
\par        -1/--tlsv1
\par               (HTTPS) Forces curl to use TSL version 1 when negotiating with a remote TLS server.
\par 
\par        -2/--sslv2
\par               (HTTPS) Forces curl to use SSL version 2 when negotiating with a remote SSL server.
\par 
\par        -3/--sslv3
\par               (HTTPS) Forces curl to use SSL version 3 when negotiating with a remote SSL server.
\par 
\par        -4/--ipv4
\par               If libcurl is capable of resolving an address to multiple IP versions (which it is if it is ipv6-capable), this option tells libcurl
\par               to resolve names to IPv4 addresses only. (Added in 7.10.8)
\par 
\par        -6/--ipv6
\par               If libcurl is capable of resolving an address to multiple IP versions (which it is if it is ipv6-capable), this option tells libcurl
\par               to resolve names to IPv6 addresses only. (Added in 7.10.8)
\par 
\par        -#/--progress-bar
\par               Make curl display progress information as a progress bar instead of the default statistics.
\par 
\par               If this option is used twice, the second will again disable the progress bar.
\par 
\par FILES
\par        ~/.curlrc
\par               Default config file.
\par 
\par ENVIRONMENT
\par        http_proxy [protocol://]<host>[:port]
\par               Sets proxy server to use for HTTP.
\par 
\par        HTTPS_PROXY [protocol://]<host>[:port]
\par               Sets proxy server to use for HTTPS.
\par 
\par        FTP_PROXY [protocol://]<host>[:port]
\par               Sets proxy server to use for FTP.
\par 
\par        GOPHER_PROXY [protocol://]<host>[:port]
\par               Sets proxy server to use for GOPHER.
\par 
\par        ALL_PROXY [protocol://]<host>[:port]
\par               Sets proxy server to use if no protocol-specific proxy is set.
\par 
\par        NO_PROXY <comma-separated list of hosts>
\par               list of host names that shouldn't go through any proxy. If set to a asterisk
\par 
\par EXIT CODES
\par        There  exists a bunch of different error codes and their corresponding error messages that may appear during bad conditions. At the time of
\par        this writing, the exit codes are:
\par 
\par        1      Unsupported protocol. This build of curl has no support for this protocol.
\par 
\par        2      Failed to initialize.
\par 
\par        3      URL malformat. The syntax was not correct.
\par 
\par        4      URL user malformatted. The user-part of the URL syntax was not correct.
\par 
\par        5      Couldn't resolve proxy. The given proxy host could not be resolved.
\par 
\par        6      Couldn't resolve host. The given remote host was not resolved.
\par 
\par        7      Failed to connect to host.
\par 
\par        8      FTP weird server reply. The server sent data curl couldn't parse.
\par 
\par        9      FTP access denied. The server denied login.
\par 
\par        10     FTP user/password incorrect. Either one or both were not accepted by the server.
\par 
\par        11     FTP weird PASS reply. Curl couldn't parse the reply sent to the PASS request.
\par 
\par        12     FTP weird USER reply. Curl couldn't parse the reply sent to the USER request.
\par 
\par        13     FTP weird PASV reply, Curl couldn't parse the reply sent to the PASV request.
\par 
\par        14     FTP weird 227 format. Curl couldn't parse the 227-line the server sent.
\par 
\par        15     FTP can't get host. Couldn't resolve the host IP we got in the 227-line.
\par 
\par        16     FTP can't reconnect. Couldn't connect to the host we got in the 227-line.
\par 
\par        17     FTP couldn't set binary. Couldn't change transfer method to binary.
\par 
\par        18     Partial file. Only a part of the file was transfered.
\par 
\par        19     FTP couldn't download/access the given file, the RETR (or similar) command failed.
\par 
\par        20     FTP write error. The transfer was reported bad by the server.
\par 
\par        21     FTP quote error. A quote command returned error from the server.
\par 
\par        22     HTTP page not retrieved. The requested url was not found or returned another error with the HTTP error code being 400 or above. This
\par               return code only appears if -f/--fail is used.
\par 
\par        23     Write error. Curl couldn't write data to a local filesystem or similar.
\par 
\par        24     Malformed user. User name badly specified.
\par 
\par        25     FTP couldn't STOR file. The server denied the STOR operation, used for FTP uploading.
\par 
\par        26     Read error. Various reading problems.
\par 
\par        27     Out of memory. A memory allocation request failed.
\par 
\par        28     Operation timeout. The specified time-out period was reached according to the conditions.
\par 
\par        29     FTP couldn't set ASCII. The server returned an unknown reply.
\par 
\par        30     FTP PORT failed. The PORT command failed. Not all FTP servers support the PORT command, try doing a transfer using PASV instead!
\par 
\par        31     FTP couldn't use REST. The REST command failed. This command is used for resumed FTP transfers.
\par 
\par        32     FTP couldn't use SIZE. The SIZE command failed. The command is an extension to the original FTP spec RFC 959.
\par 
\par        33     HTTP range error. The range "command" didn't work.
\par 
\par        34     HTTP post error. Internal post-request generation error.
\par 
\par        35     SSL connect error. The SSL handshaking failed.
\par 
\par        36     FTP bad download resume. Couldn't continue an earlier aborted download.
\par 
\par        37     FILE couldn't read file. Failed to open the file. Permissions?
\par 
\par        38     LDAP cannot bind. LDAP bind operation failed.
\par 
\par        39     LDAP search failed.
\par 
\par        40     Library not found. The LDAP library was not found.
\par 
\par        41     Function not found. A required LDAP function was not found.
\par 
\par        42     Aborted by callback. An application told curl to abort the operation.
\par 
\par        43     Internal error. A function was called with a bad parameter.
\par 
\par        44     Internal error. A function was called in a bad order.
\par 
\par        45     Interface error. A specified outgoing interface could not be used.
\par 
\par        46     Bad password entered. An error was signaled when the password was entered.
\par 
\par        47     Too many redirects. When following redirects, curl hit the maximum amount.
\par 
\par        48     Unknown TELNET option specified.
\par 
\par        49     Malformed telnet option.
\par 
\par        51     The remote peer's SSL certificate wasn't ok
\par 
\par        52     The server didn't reply anything, which here is considered an error.
\par 
\par        53     SSL crypto engine not found
\par 
\par        54     Cannot set SSL crypto engine as default
\par 
\par        55     Failed sending network data
\par 
\par        56     Failure in receiving network data
\par 
\par        57     Share is in use (internal error)
\par 
\par        58     Problem with the local certificate
\par 
\par        59     Couldn't use specified SSL cipher
\par 
\par        60     Problem with the CA cert (path? permission?)
\par 
\par        61     Unrecognized transfer encoding
\par 
\par        62     Invalid LDAP URL
\par 
\par        63     Maximum file size exceeded
\par 
\par        XX     There will appear more error codes here in future releases. The existing ones are meant to never change.
\par 
\par AUTHORS / CONTRIBUTORS
\par        Daniel Stenberg is the main author, but the whole list of contributors is found in the separate THANKS file.
\par 
\par WWW
\par        http://curl.haxx.se
\par 
\par FTP
\par        ftp://ftp.sunet.se/pub/www/utilities/curl/
\par 
\par SEE ALSO
\par        ftp(1), wget(1), snarf(1)
\par 
\par Curl 7.12                                                           3 May 2004                                                             curl(1)\par}