{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}{\f4\fnil Arial;}{\f5\fnil\fcharset0 Courier New;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1219584363\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1360451870}
{\list\listtemplateid509491611\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f4\fs24}
\listid1449610761}
{\list\listtemplateid881962546\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid708735228}
{\list\listtemplateid1969400048\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid2106970807}
{\list\listtemplateid173276568\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f4\fs24}
\listid858428922}
{\list\listtemplateid2097306086\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid849551237}
{\list\listtemplateid1168160157
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
\listid1522353688}
{\list\listtemplateid1453277820\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1330709107}
}
{\*\listoverridetable
{\listoverride\listid1360451870\listoverridecount0\ls1}
{\listoverride\listid1449610761\listoverridecount0\ls2}
{\listoverride\listid708735228\listoverridecount0\ls3}
{\listoverride\listid2106970807\listoverridecount0\ls4}
{\listoverride\listid858428922\listoverridecount0\ls5}
{\listoverride\listid849551237\listoverridecount0\ls6}
{\listoverride\listid1522353688\listoverridecount0\ls7}
{\listoverride\listid1330709107\listoverridecount0\ls8}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 man page
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 CSCOPE(1)                                                                                                                                                CSCOPE(1)
\par NAME
\par \plain \f1\fs20\cf1        cscope - interactively examine a C program
\par 
\par \plain \f1\fs20 SYNOPSIS
\par        cscope [-bCcdehkLlqRTUuVv] [-Fsymfile] [-freffile] [-Iincdir] [-inamefile] [-[0-9]pattern] [-pn] [-sdir] [files]
\par 
\par DESCRIPTION
\par        cscope is an interactive, screen-oriented tool that allows the user to browse through C source files for specified elements of code.
\par 
\par        By  default, cscope examines the C (.c and .h), lex (.l), and yacc (.y) source files in the current directory.  cscope may also be invoked for source files
\par        named on the command line. In either case, cscope searches the standard directories for #include files that it does not  find  in  the  current  directory.
\par        cscope uses a symbol cross-reference, called cscope.out by default, to locate functions, function calls, macros, variables, and preprocessor symbols in the
\par        files.
\par 
\par        cscope builds the symbol cross-reference the first time it is used on the source files for the program being browsed. On a  subsequent  invocation,  cscope
\par        rebuilds  the cross-reference only if a source file has changed or the list of source files is different. When the cross-reference is rebuilt, the data for
\par        the unchanged files are copied from the old cross-reference, which makes rebuilding faster than the initial build.
\par 
\par OPTIONS
\par        Some command line arguments can only occur as the the ony argument in the execution of cscope.  They cause the program to just print out  some  output  and
\par        exit immediately:
\par 
\par        -h     View the long usage help display.
\par 
\par        -V     Print on the first line of screen the version number of cscope.
\par 
\par        --help Same as -h
\par 
\par        --version
\par               Same as -V
\par 
\par 
\par        The following options can appear in any combination:
\par 
\par        -b     Build the cross-reference only.
\par 
\par        -C     Ignore letter case when searching.
\par 
\par        -c     Use only ASCII characters in the cross-reference file, that is, do not compress the data.
\par 
\par        -d     Do not update the cross-reference.
\par 
\par        -e     Suppress the <Ctrl>-e command prompt between files.
\par 
\par        -Fsymfile
\par               Read  symbol  reference  lines  from  symfile.  (A symbol reference file is created by > and >>, and can also be read using the < command, described
\par               under \lquote \lquote Issuing Subsequent Requests,\rquote \rquote  below.)
\par 
\par        -freffile
\par               Use reffile as the cross-reference file name instead of the default "cscope.out".
\par 
\par        -Iincdir
\par               Look in incdir (before looking in $INCDIR, the standard place for header files, normally /usr/include) for any #include files  whose  names  do  not
\par               begin with \lquote \lquote /\rquote \rquote  and that are not specified on the command line or in namefile below. (The #include files may be specified with either double quotes
\par               or angle brackets.)  The incdir directory is searched in addition to the current directory (which is searched first) and the standard list (which is
\par               searched last). If more than one occurrence of -I appears, the directories are searched in the order they appear on the command line.
\par 
\par        -inamefile
\par               Browse  through all source files whose names are listed in namefile (file names separated by spaces, tabs, or new-lines) instead of the default name
\par               list file, which is called cscope.files. If this option is specified, cscope ignores any file names appearing on  the  command  line.  The  argument
\par               namefile  can  be  set  to  \lquote \lquote -\rquote \rquote   to  accept a list of files from the standard input.  Filenames in the namefile that contain whitespace have to be
\par               enclosed in "double quotes".  Inside such quoted filenames, any double-quote and backslash characters have to be escaped by backslashes.
\par 
\par        -k     \lquote \lquote Kernel Mode\rquote \rquote , turns off the use of the default include dir (usually /usr/include) when building the database, since kernel source trees generally
\par               do not use it.
\par 
\par        -L     Do a single search with line-oriented output when used with the -num pattern option.
\par 
\par        -l     Line-oriented interface (see \lquote \lquote Line-Oriented Interface\rquote \rquote  below).
\par 
\par        -[0-9]pattern
\par               Go to input field num (counting from 0) and find pattern.
\par 
\par        -Ppath Prepend path to relative file names in a pre-built cross-reference file so you do not have to change to the directory where the cross-reference file
\par               was built. This option is only valid with the -d option.
\par 
\par        -pn    Display the last n file path components instead of the default (1). Use 0 to not display the file name at all.
\par 
\par        -q     Enable fast symbol lookup via an inverted  index.  This  option  causes  cscope  to  create  2  more  files  (default  names  \lquote \lquote cscope.in.out\rquote \rquote   and
\par               \lquote \lquote cscope.po.out\rquote \rquote )  in  addition to the normal database. This allows a faster symbol search algorithm that provides noticeably faster lookup perfor-
\par               mance for large projects.
\par 
\par        -R     Recurse subdirectories during search for source files.
\par 
\par        -sdir  Look in dir for additional source files. This option is ignored if source files are given on the command line.
\par 
\par        -T     Use only the first eight characters to match against C symbols.  A regular expression containing special characters other than a period (.) will not
\par               match any symbol if its minimum length is greater than eight characters.
\par 
\par        -U     Check file time stamps. This option will update the time stamp on the database even if no files have changed.
\par 
\par        -u     Unconditionally build the cross-reference file (assume that all files have changed).
\par 
\par        -v     Be more verbose in line-oriented mode.  Output progress updates during database building and searches.
\par 
\par        files  A list of file names to operate on.
\par 
\par        The -I, -c, -k, -p, -q, and -T options can also be in the cscope.files file.
\par 
\par        Requesting the initial search
\par 
\par        After the cross-reference is ready, cscope will display this menu:
\par 
\par        Find this C symbol:
\par        Find this function definition:
\par        Find functions called by this function:
\par        Find functions calling this function:
\par        Find this text string:
\par        Change this text string:
\par        Find this egrep pattern:
\par        Find this file:
\par        Find files #including this file:
\par 
\par        Press the <Up> or <Down> keys repeatedly to move to the desired input field, type the text to search for, and then press the <Return> key.
\par 
\par 
\par Issuing subsequent requests
\par        If the search is successful, any of these single-character commands can be used:
\par 
\par        0-9a-zA-Z
\par               Edit the file referenced by the given line number.
\par 
\par        <Space>
\par               Display next set of matching lines.
\par 
\par        <Tab>  Alternate between the menu and the list of matching lines
\par 
\par        <Up>   Move to the previous menu item (if the cursor is in the menu) or move to the previous matching line (if the cursor is in the matching line list.)
\par 
\par        <Down> Move to the next menu item (if the cursor is in the menu) or move to the next matching line (if the cursor is in the matching line list.)
\par 
\par        +      Display next set of matching lines.
\par 
\par        -      Display previous set of matching lines.
\par 
\par        ^e     Edit displayed files in order.
\par 
\par        >      Write the displayed list of lines to a file.
\par 
\par        >>     Append the displayed list of lines to a file.
\par 
\par        <      Read lines from a file that is in symbol reference format (created by > or >>), just like the -F option.
\par 
\par        ^      Filter all lines through a shell command and display the resulting lines, replacing the lines that were already there.
\par 
\par        |      Pipe all lines to a shell command and display them without changing them.
\par 
\par        At any time these single-character commands can also be used:
\par 
\par        <Return>
\par               Move to next input field.
\par 
\par        ^n     Move to next input field.
\par 
\par        ^p     Move to previous input field.
\par 
\par        ^y     Search with the last text typed.
\par 
\par        ^b     Move to previous input field and search pattern.
\par 
\par        ^f     Move to next input field and search pattern.
\par 
\par        ^c     Toggle ignore/use letter case when searching. (When ignoring letter case, search for \lquote \lquote FILE\rquote \rquote  will match \lquote \lquote File\rquote \rquote  and \lquote \lquote file\rquote \rquote .)
\par 
\par        ^r     Rebuild the cross-reference.
\par 
\par        !      Start an interactive shell (type ^d to return to cscope).
\par 
\par        ^l     Redraw the screen.
\par 
\par        ?      Give help information about cscope commands.
\par 
\par        ^d     Exit cscope.
\par 
\par 
\par        NOTE: If the first character of the text to be searched for matches one of the above commands, escape it by typing a (backslash) first.
\par 
\par        Substituting new text for old text
\par 
\par        After  the  text  to be changed has been typed, cscope will prompt for the new text, and then it will display the lines containing the old text. Select the
\par        lines to be changed with these single-character commands:
\par 
\par 
\par        0-9a-zA-Z
\par               Mark or unmark the line to be changed.
\par 
\par        *      Mark or unmark all displayed lines to be changed.
\par 
\par        <Space>
\par               Display next set of lines.
\par 
\par        +      Display next set of lines.
\par 
\par        -      Display previous set of lines.
\par 
\par        a      Mark or unmark all lines to be changed.
\par 
\par        ^d     Change the marked lines and exit.
\par 
\par        <Esc>  Exit without changing the marked lines.
\par 
\par        !      Start an interactive shell (type ^d to return to cscope).
\par 
\par        ^l     Redraw the screen.
\par 
\par        ?      Give help information about cscope commands.
\par 
\par        Special keys
\par 
\par        If your terminal has arrow keys that work in vi, you can use them to move around the input fields. The up-arrow key is useful to move to the previous input
\par        field instead of using the <Tab> key repeatedly. If you have <CLEAR>, <NEXT>, or <PREV> keys they will act as the ^l, +, and - commands, respectively.
\par 
\par        Line-Oriented interface
\par 
\par        The -l option lets you use cscope where a screen-oriented interface would not be useful, for example, from another screen-oriented program.
\par 
\par        cscope  will prompt with >> when it is ready for an input line starting with the field number (counting from 0) immediately followed by the search pattern,
\par        for example, \lquote \lquote lmain\rquote \rquote  finds the definition of the main function.
\par 
\par        If you just want a single search, instead of the -l option use the -L and -num pattern options, and you won\rquote t get the >> prompt.
\par 
\par        For -l, cscope outputs the number of reference lines cscope: 2 lines
\par 
\par        For each reference found, cscope outputs a line consisting of the file name, function name, line number, and line text, separated by spaces,  for  example,
\par        main.c main 161 main(argc, argv)
\par 
\par        Note that the editor is not called to display a single reference, unlike the screen-oriented interface.
\par 
\par        You  can  use  the  c  command  to  toggle  ignore/use  letter case when searching. (When ignoring letter case, search for \lquote \lquote FILE\rquote \rquote  will match \lquote \lquote File\rquote  and
\par        \lquote \lquote file\rquote \rquote .)
\par 
\par        You can use the r command to rebuild the database.
\par 
\par        cscope will quit when it detects end-of-file, or when the first character of an input line is \lquote \lquote ^d\rquote \rquote  or \lquote \lquote q\rquote \rquote .
\par 
\par 
\par ENVIRONMENT VARIABLES
\par        CSCOPE_EDITOR
\par               Overrides the EDITOR and VIEWER variables. Use this if you wish to use a different editor with cscope than  that  specified  by  your  EDITOR/VIEWER
\par               variables.
\par 
\par        CSCOPE_LINEFLAG
\par               Format  of the line number flag for your editor. By default, cscope invokes your editor via the equivalent of \lquote \lquote editor +N file\rquote \rquote , where \lquote \lquote N\rquote \rquote  is the
\par               line number that the editor should jump to. This format is used by both emacs and vi. If your editor needs something different, specify it  in  this
\par               variable,  with \lquote \lquote %s\rquote \rquote  as a placeholder for the line number.  Ex: if your editor needs to be invoked as \lquote \lquote editor -#103 file\rquote \rquote  to go to line 103, set
\par               this variable to \lquote \lquote -#%s\rquote \rquote .
\par 
\par        CSCOPE_LINEFLAG_AFTER_FILE
\par               Set this variable to \lquote \lquote yes\rquote \rquote  if your editor needs to be invoked with the line number option after the filename to be edited. To continue the example
\par               from  CSCOPE_LINEFLAG,  above:  if  your editor needs to see \lquote \lquote editor file -#number\rquote \rquote , set this environment variable. Users of most standard editors
\par               (vi, emacs) do not need to set this variable.
\par 
\par        EDITOR Preferred editor, which defaults to vi.
\par 
\par        HOME   Home directory, which is automatically set at login.
\par 
\par        INCLUDEDIRS
\par               Colon-separated list of directories to search for #include files.
\par 
\par        SHELL  Preferred shell, which defaults to sh.
\par 
\par        SOURCEDIRS
\par               Colon-separated list of directories to search for additional source files.
\par 
\par        TERM   Terminal type, which must be a screen terminal.
\par 
\par        TERMINFO
\par               Terminal information directory full path name. If your terminal is not in the standard terminfo directory, see curses and terminfo for how  to  make
\par               your own terminal description.
\par 
\par        TMPDIR Temporary file directory, which defaults to /var/tmp.
\par 
\par        VIEWER Preferred file display program (such as less), which overrides EDITOR (see above).
\par 
\par        VPATH  A colon-separated list of directories, each of which has the same directory structure below it. If VPATH is set, cscope searches for source files in
\par               the directories specified; if it is not set, cscope searches only in the current directory.
\par 
\par 
\par FILES
\par        cscope.files
\par               Default files containing -I, -p, -q, and -T options and the list of source files (overridden by the -i option).
\par 
\par        cscope.out
\par               Symbol cross-reference file (overridden by the -f option), which is put in the home directory if it cannot be created in the current directory.
\par 
\par        cscope.in.out
\par        cscope.po.out
\par               Default files containing the inverted index used for quick symbol searching (-q option). If you use the -f option to rename the cross-reference file
\par               (so it\rquote s not cscope.out), the names for these inverted index files will be created by adding
\par                .in and .po to the name you supply with -f. For example, if you indicated -f xyz, then these files would be named xyz.in and xyz.po.
\par 
\par        INCDIR Standard directory for #include files (usually /usr/include).
\par 
\par Notices
\par        cscope recognizes function definitions of the form:
\par        fname blank ( args ) white arg_decs white \{
\par 
\par        where: fname is the function name
\par 
\par        blank  is zero or more spaces or tabs, not including newlines
\par 
\par        args   is any string that does not contain a \lquote \lquote "\rquote \rquote  or a newline
\par 
\par        white  is zero or more spaces, tabs, or newlines
\par 
\par        arg_decs
\par               are zero or more argument declarations (arg_decs may include comments and white space)
\par 
\par        It is not necessary for a function declaration to start at the beginning of a line. The return type may precede the function name; cscope will still recog-
\par        nize the declaration. Function definitions that deviate from this form will not be recognized by cscope.
\par 
\par        The \lquote \lquote Function\rquote \rquote  column of the search output for the menu option Find functions called by this function: input field will only display the  first  function
\par        called in the line, that is, for this function
\par 
\par         e()
\par         \{
\par                 return (f() + g());
\par         \}
\par 
\par        the display would be
\par 
\par           Functions called by this function: e
\par           File Function Line
\par           a.c f 3 return(f() + g());
\par 
\par        Occasionally,  a  function definition or call may not be recognized because of braces inside #if statements. Similarly, the use of a variable may be incor-
\par        rectly recognized as a definition.
\par 
\par        A typedef name preceding a preprocessor statement will be incorrectly recognized as a global definition, for example,
\par 
\par         LDFILE  *
\par         #if AR16WR
\par 
\par        Preprocessor statements can also prevent the recognition of a global definition, for example,
\par 
\par         char flag
\par         #ifdef ALLOCATE_STORAGE
\par              = -1
\par         #endif
\par         ;
\par 
\par        A function declaration inside a function is incorrectly recognized as a function call, for example,
\par 
\par         f()
\par         \{
\par                 void g();
\par         \}
\par 
\par        is incorrectly recognized as a call to g.
\par 
\par        cscope recognizes C++ classes by looking for the class keyword, but doesn\rquote t recognize that a struct is also a class, so it doesn\rquote t recognize inline  member
\par        function definitions in a structure. It also doesn\rquote t expect the class keyword in a typedef , so it incorrectly recognizes X as a definition in
\par 
\par         typedef class X  *  Y;
\par 
\par        It also doesn\rquote t recognize operator function definitions
\par 
\par         Bool Feature::operator==(const Feature & other)
\par         \{
\par           ...
\par         \}
\par 
\par        Nor does it recognize function definitions with a function pointer argument
\par 
\par         ParseTable::Recognize(int startState, char *pattern,
\par           int finishState, void (*FinalAction)(char *))
\par         \{
\par           ...
\par         \}
\par 
\par 
\par 
\par The Santa Cruz Operation                                                    August 2003                                                                  CSCOPE(1)\par}